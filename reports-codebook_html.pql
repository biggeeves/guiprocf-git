PROCEDURE      REPORTS.CODEBOOK_HTML:T  (157655,30722)  |Last amended Jun 06, 2014,08:32:02
| Make a nice looking HTML codebook to send to someone


call SYSPROC.TOOLS.HTMLCODE
call GUIPROCF.SYSTEM.ALLRECS

program crwarn
<comment> write "making HTML Codebook"
call GUIPROCF.GUI_MAIN.DECLARE_VARIABLES
. integer * 1 KEYVAR COMVAR COM#
. integer * 2 VARS# RECDOCN# RECLINE# LETTER# LETTERS#
. string * 1 LETTER$
. string * 32 MISS$ REC$ DB$ CVAR$ KEY$ COM$ LABEL$ FDATE$
. string * 255 HTML_LINE$ HTM VARDOC$ RECDOC$ VALLAB$ VARLAB$
. string * 200 REPLACE$
. STRING  * 32  ALTERNATE_BGCOLOR
. date TODAY_ ('MM/DD/YYYY')
. string * 32 TODAY$


. string * 32 TODAY_IS
. set KEYVAR COMVAR COM# ( 0 )

. set YES(1) NO (0)
. DB_SR1_FILE = dsn( 'SIR'+ PFORMAT( SYSTEM( 39 ), 'zz' ) +'1' )
. execute subroutine SYSPROC.TOOLS.FILENAME (DB_SR1_FILE) returning ( PATH_FILE, NAME_FILE, EXT_FILE )


. CASE_NAME = upper( trim( varname( 0, 1 ) ) )

. TODAY_IS = DATEC(TODAY(0),'MM/DD/YYYYY')
. SET RECDOC$ CVAR$ ( '' )
. DB$ = trim( dbname( 0 ) )

. HTM = '<1>'
. HTM = replace(HTM,'"','',10,0,0)
. HTM = replace(HTM,"'","",10,0,0)
. ifthen ( len(HTM) eq 0 )
.   HTM = '<GDATA1>'  | TRY GDATA1 GLOBAL FIRST
.   IFTHEN ( len(HTM) > 0)
.     HTM = HTM + DB$ + '\Codebook.htm'
.   ELSE | TRY DATABASE PATH  (WHICH HAS SLASH IN IT)
.     HTM = PATH_FILE + 'Codebook.htm'  | Next try database folder
.   ENDIF
. elseif ( sbst( reverse(HTM), 1, 1) <> '\')
.   HTM = HTM + '\Codebook.htm'
. else
.   HTM = HTM + 'Codebook.htm'
. endif
. DB_FOLDER = dsn('prefix')
. FDATE$ = reverse( sbst( reverse( DB_FOLDER ), 8, 10 ) )
|If the folder is the live database folder, use today's date. If it is in the backup folder, use the folder date
. ifthen ( picture( FDATE$, 'dddd_dd_dd' ) eq 0)
.   TODAY_ = cdate( FDATE$, 'YYYY_MM_DD' )
.   TODAY$ = TODAY_
. else
.   TODAY$ = datec( today(0), 'Wwwwwwwww MM/DD/YYYY' )
. endif
. open ( HTM ) write dsnvar = HTM lrecl = 300
. execute subprocedure MAKE_HEADER
write 'Database codebook is ' DB$ TODAY_IS
write 'Database codebook path: ' [DSN('HTM')]
. write ( HTM ) '<body>'
. write ( HTM ) '<div class="entire_rec">'
. write ( HTM ) '  <h2><a id="Top">Codebook</a> for the ' DB$ ' Database </h2>'
. write ( HTM ) '  <h2>' TODAY_IS '</h2>'
. write ( HTM ) '</div>' | entire_rec
|Index of Record Types
. ALTERNATE_BGCOLOR = HTML_WHITE
. write ( HTM ) '  <h1>Database Tables</h1>'
. write ( HTM ) '  <table><tr><th>Table</th><th>Description</th></tr>'
. write ( HTM ) '  <tbody>'
. for EACH_REC = 0,  nrecs( 0 )
.   if ( nvarsc( EACH_REC ) le 0 ) next for
.   REC$ = trim( recname( EACH_REC ) )
.   write ( HTM ) '<tr>'
.   write ( HTM ) 1t '<td>'
.   write ( HTM ) 1t ['<a href="#' + trim( format( EACH_REC ) )+'" title="' + format(EACH_REC) + '">']
.   write ( HTM ) 1t REC$
.   write ( HTM ) 1t '</a>'
.   write ( HTM ) 1t '</td>'

.   RECDOC$ = trimlr( recdoc( EACH_REC, 0 ) )
.   ifthen ( len( RECDOC$ ) = 0 and REC$ = 'CIR' )
.     RECDOC$ = 'Common Information'
.   elseif ( len( RECDOC$ ) < 1 )
.     REPLACE$ = trimlr( recdoc( EACH_REC, 1 ) )
.     execute subprocedure REPLACE_HTML
.     RECDOC$ = REPLACE$
.   endif

.   write ( HTM ) 1t '<td>'
.   ifthen ( exists( RECDOC$ ) = YES )
.   write ( HTM ) 1t ['<a href="#' + trim( format( EACH_REC ) )+'" title="' + format(EACH_REC) + '">']
.     write ( HTM ) RECDOC$
.   write ( HTM ) 1t '</a>'
.   else
.     write ( HTM ) 1t '&nbsp;'
.   endif
.   write ( HTM ) 1t '</td>'
.   write ( HTM ) 1t '</tr>'
. end for
. write ( HTM ) '</tbody>'
. write ( HTM ) '</table>'

. write ( HTM ) '<HR>'


C DATABASE STRUCTURE AND KEYS
. write ( HTM ) '<h1>Database Tables and keys.   Relationships.</h1>'
. write ( HTM ) '  <table><tr><th>Table</th><th>Keys</th></tr>'
. write ( HTM ) '  <tbody>'
. for EACH_REC = 0,  nrecs( 0 )
.   if ( nvarsc( EACH_REC ) le 0 ) next for
.   REC$ = trim( recname( EACH_REC ) )
.   write ( HTM ) '<tr>'
.   write ( HTM ) ' <td>' REC$ '</td>'
.   write ( HTM ) ' <td>'
.   if(dbtype(0) eq nkeys(EACH_REC) + 1 ) write (HTM) 'No Keys'
.   for EACH_KEY = 1, nkeys(EACH_REC)
.     VAR_NAME  = trimlr(keyname(EACH_REC, EACH_KEY + dbtype(0)))
.     VAR_LABEL = trimlr(varlabsc(EACH_REC, VAR_NAME))
.     HTML_LINE$ =  VAR_NAME + '<span class="VARLABEL"> ' + '"' + VAR_LABEL + '"</span> '
.     write( HTM ) ' Key' EACH_KEY ': 'HTML_LINE$
.     if ( EACH_KEY < nkeys(EACH_REC)) WRITE ( HTM ) ', '
C .     execute subprocedure MAKE_FORMAT
.   end for
.   write ( HTM ) ' </td>'
.   write ( HTM ) '</tr>'
. end for
. write ( HTM ) '</tbody>'
. write ( HTM ) '</table>'


|List of Variables by Record Type
. for EACH_REC = 0,  nrecs( 0 )
.   VARS# = nvarsc( EACH_REC )
.   IF ( VARS# LE 0 ) NEXT FOR
|Record Type Header
.   REC$ = trim( recname( EACH_REC ) )
.   RECDOC$ = trimlr( recdoc( EACH_REC, 0 ) )
.   ifthen ( len( RECDOC$ ) = 0 and REC$ = 'CIR' )
.     RECDOC$ = 'Common Information'
.   elseif ( len( RECDOC$ ) < 1 )
.     REPLACE$ = trimlr( recdoc( EACH_REC, 1 ) )
.     execute subprocedure REPLACE_HTML
.     RECDOC$ = REPLACE$
.   endif
.   ifthen ( ALTERNATE_BGCOLOR EQ HTML_WHITE )
.     ALTERNATE_BGCOLOR = HTML_YELLOW1;
.   else
.     ALTERNATE_BGCOLOR = HTML_WHITE;
.   endif
.   write ( HTM ) ['<div class="recordtype" style="background-color:' + ALTERNATE_BGCOLOR + '" title="Viewing Table: ' + REC$ + ': ' + format( EACH_REC ) + ' ">']

.   write ( HTM ) '<a href="#Top" class="button">Back to Top</a>'
.   write ( HTM ) '<div style="clear:both"></div>'
.   write ( HTM ) ['<h1><a id="' + format( EACH_REC ) + '">Table: ' +  REC$  + '</a>']
.   ifthen ( len( RECDOC$ ) > 0 )
.     write ( HTM ) ['<br> <span class="VARLABEL">"' + RECDOC$ + '"</span>']
.   endif
.   write ( HTM ) '</h1>'
.   write ( HTM ) '<hr class="record">'
|Record Documentation,  if there is any
.   RECDOCN# = recdocn( EACH_REC )
.   RECDOC$ = ''
.   ifthen ( RECDOCN# > 0 )
.     for RECLINE# = 1, RECDOCN#
.       REPLACE$ = recdoc( EACH_REC, RECLINE# )
.       execute subprocedure REPLACE_HTML
.       RECDOC$ = REPLACE$
.       ifthen ( RECLINE# = 1 )
.         RECDOC$ = 'Table Documentation: ' + RECDOC$
.       endif
.       ifthen ( len( RECDOC$ ) > 0 )
.         write ( HTM ) '<p class="IMPORTANT_VAR">' RECDOC$ '</p>'
.       endif
.     end for
.   endif
|
.   for EACH_VAR = 1, VARS#
.     VAR_NAME = trim( varnamec( EACH_REC, EACH_VAR ) )
|Key
.     KEYVAR = NO
.     for KEY# = 1, nkeys( EACH_REC )
.       KEY$ = upper( trim( keyname( EACH_REC, KEY# + dbtype(0) ) ) )
.       if ( KEY$ = VAR_NAME ) KEYVAR = YES; EXIT FOR
.     end for
|Common Var
.     COMVAR = NO
.     for COM# = dbtype(0) + 1, nvars( 0 )
.       COM$ = upper( trim( varname( 0, COM# ) ) )
.       if ( COM$ = VAR_NAME ) COMVAR = YES; EXIT FOR
.     end for
|Var Doc
.     REPLACE$ = vardocsn( EACH_REC, VAR_NAME, 1 )
.     execute subprocedure REPLACE_HTML
.     VARDOC$ = REPLACE$
|Var Label
.     REPLACE$ = varlabsc( EACH_REC, VAR_NAME )
.     execute subprocedure REPLACE_HTML
.     VARLAB$ = REPLACE$

|putting it all together
.     HTML_LINE$ = '<div class="ALL_VAR_INFO '
c     add another class for keyvars and common vars
.     ifthen ( VAR_NAME = CASE_NAME )
.       HTML_LINE$ = HTML_LINE$ + 'IMPORTANT_VAR '
.     elseif ( KEYVAR = YES )
.       HTML_LINE$ = HTML_LINE$ + 'IMPORTANT_VAR '
.     elseif ( COMVAR = YES )
.       HTML_LINE$ = HTML_LINE$ + 'IMPORTANT_VAR '
.     endif
.     HTML_LINE$ = HTML_LINE$ + '">'  | CLOSE THE CLASS QOUTES AND THE DIV
.     write ( HTM ) 1t HTML_LINE$
.     write ( HTM ) 1t '<p>'
.     ifthen ( VAR_NAME = CASE_NAME )
.       write ( HTM ) '(Case Variable) '
.     elseif ( KEYVAR = YES )
.       write ( HTM ) '(Sort variable) '
.     elseif ( COMVAR = YES )
.       write ( HTM ) '( Common variable ) '
.     endif

.     ifthen ( len( VARDOC$ ) > 0 )
.       write ( HTM ) 1t ['<p class="indent1">Variable Documentation: "' + VARDOC$ + '"</p>']
.     endif
.     write ( HTM ) 1t ['<span class="VARNAME">' + VAR_NAME + ': </span><span class="VARLABEL">"' + VARLAB$ + '"</span>']
.     write ( HTM ) 1t '</p>'

.     execute subprocedure MXFORMAT
.     write ( HTM ) '</div>'



.     if (EACH_VAR < VARS# ) write ( HTM ) 1t '<hr class="variable">'
.   end for
.   write ( HTM ) 1t '</div>' | end of record type div.
. end for
. write ( HTM )  '</body>'
. write ( HTM )  '</html>'
|
. subprocedure MXFORMAT
| Type
.  Write ( HTM ) '<p class="indent3">'
.  ifthen ( vtype( EACH_REC, VAR_NAME ) = 1 ) |  string
.    HTML_LINE$ = 'Text'
.  elseif ( vtype( EACH_REC, VAR_NAME ) = 2 ) |  categorical
.    HTML_LINE$ = 'Number-Categorical( '
.  elseif ( vtype( EACH_REC, VAR_NAME ) = 3 ) |  date
.    HTML_LINE$ = 'Date'
.  elseif ( vtype( EACH_REC, VAR_NAME ) = 4 ) |  time
.    HTML_LINE$ = 'Time'
.  elseif ( vtype( EACH_REC, VAR_NAME ) = 5 ) |  integer
.    HTML_LINE$ = 'Integer'
.  elseif ( vtype( EACH_REC, VAR_NAME ) = 6 OR 7 ) |  real ( single precision )
.    HTML_LINE$ = 'Decimal'
.  elseif ( vtype( EACH_REC, VAR_NAME ) = 8 ) |  scaled variable
.    HTML_LINE$ = 'Number-Scaled'
.  endif

.  VAR_FORMAT = vschfmt( EACH_REC, VAR_NAME )
.  HTML_LINE$ = HTML_LINE$ + ' (' + VAR_FORMAT + ')'
.  Write ( HTM ) 1t HTML_LINE$

| Range
.  HTML_LINE$ = ''
.  ifthen ( exists( nmin( EACH_REC, VAR_NAME ) ) )
.    ifthen ( vtype( EACH_REC, VAR_NAME ) = 3 ) |  date
.      HTML_LINE$ = datec( nmin( EACH_REC, VAR_NAME ), 'mm/dd/yyyy' ) + ' - ' + datec( NMAX( EACH_REC, VAR_NAME ), 'mm/dd/yyyy' )
.    elseif ( vtype( EACH_REC, VAR_NAME ) = 4 ) |  time
.      HTML_LINE$ = timec( nmin( EACH_REC, VAR_NAME ), 'hh:mm' )+ ' - ' + timec( NMAX( EACH_REC, VAR_NAME ), 'hh:mm' )
.    else
.      HTML_LINE$ = format( nmin( EACH_REC, VAR_NAME ) )+ ' - ' + format( NMAX( EACH_REC, VAR_NAME ) )
.    endif
.  elseif ( exists( smin( EACH_REC, VAR_NAME ) ) )
.     HTML_LINE$ = smin( EACH_REC, VAR_NAME )+ ' - ' + SMAX( EACH_REC, VAR_NAME )
.  endif
.  ifthen ( HTML_LINE$ <> '' ) | a range was found
.    HTML_LINE$ = '<span class="indent3">Range: ' + HTML_LINE$  + '</span>'
.    Write ( HTM ) 1t HTML_LINE$
.  endif

.  Write ( HTM ) '</p>' | close 1st paragraph. formats and ranges

| Value Labels and Valid Values
.  ifthen ( nvallab( EACH_REC, VAR_NAME ) > 0 )
.    write ( HTM ) '<p class="indent3">Value Labels:</p>'
.    write ( HTM ) 1t '<ul>'
.    for EACH_LABEL = 1, nvallab( EACH_REC, VAR_NAME )
.      REPLACE$ = vallabsn( EACH_REC, VAR_NAME, EACH_LABEL )
.      execute subprocedure REPLACE_HTML
.      VALLAB$ = REPLACE$
.      write ( HTM ) 1t ['<li><span class="VALVALUE">(' + vallabsv( EACH_REC, VAR_NAME, EACH_LABEL ) + ')&nbsp;</span><span class="VALLABEL">' + VALLAB$ + '</span></li>']
.    end for
.    write ( HTM ) 1t '</ul>'
.  elseif ( nvalid( EACH_REC, VAR_NAME ) > 0 )  | VALID VALUES
.    HTML_LINE$ = ''
.    for EACH_VALID = 1,  nvalid( EACH_REC, VAR_NAME )
.      HTML_LINE$ = HTML_LINE$ + format( nvval( EACH_REC, VAR_NAME, EACH_VALID ) )
.      if ( EACH_VALID < nvalid( EACH_REC, VAR_NAME ) ) HTML_LINE$ = HTML_LINE$ + ',  '
.    end for
.    write ( HTM ) '<p class="indent3"> Valid Values: ' HTML_LINE$ '</p>'
.  endif

| Missing
.  MISS$ = '' | TRIGGER VARIABLE TO KNOW IF MISSING VALUES EXIST
.  if ( 1 EQ (exists( miss( EACH_REC, VAR_NAME, 1 ) ) ) ) MISS$ = '1'
.  if ( 1 EQ (exists( miss( EACH_REC, VAR_NAME, 2 ) ) ) ) MISS$ = '1'
.  if ( 1 EQ (exists( miss( EACH_REC, VAR_NAME, 3 ) ) ) ) MISS$ = '1'
.  ifthen ( MISS$ = '1')
.    write ( HTM ) '<p class="indent3">Missing Values:</p>'
.    write ( HTM ) '<ul>'
.    ifthen ( exists( miss( EACH_REC, VAR_NAME, 2 ) ) = YES )
.      MISS$ = trim( miss( EACH_REC, VAR_NAME, 1 ) )
.      if ( MISS$ eq '')  MISS$ = 'BLANK'
.      MISS$ = '( ' + MISS$ + ' )'
.      write ( HTM ) 1t '<li>1st &nbsp;'  MISS$
.    endif
.    ifthen ( exists( miss( EACH_REC, VAR_NAME, 2 ) ) = YES )
.      MISS$ = trim( miss( EACH_REC, VAR_NAME, 2 ) )
.      if ( MISS$ eq '')  MISS$ = 'BLANK'
.      MISS$ = '( ' + MISS$ + ' )'
.      write ( HTM ) 1t '<li>2nd '  MISS$
.    endif
.    ifthen ( exists( miss( EACH_REC, VAR_NAME, 3 ) ) = YES )
.      MISS$ = trim( miss( EACH_REC, VAR_NAME, 3 ) )
.      if ( MISS$ eq '')  MISS$ = 'BLANK'
.      MISS$ = '( ' + MISS$ + ' )'
.      write ( HTM ) 1t '<li>3rd ' MISS$
.    endif
.    write ( HTM ) 1t '</ul>'
.  endif
. end subprocedure
|
. subprocedure MAKE_HEADER
.  write ( HTM )  '<!DOCTYPE HTML>'
.  write ( HTM )  '<html>'
.  write ( HTM )  '<head>'
.  write ( HTM )  '<meta http-equiv="Content-Type" content="text/html;charset=utf-8">'
.  write ( HTM )  '<title>' DB$ ' Codebook</title>'
.  write ( HTM )  '<STYLE type="text/css">'
.  write ( HTM )  'A {text-decoration:none; color:black}'
.  write ( HTM )  'BODY {'
.  write ( HTM )  ' font-family: Arial, sans-serif;'
.  write ( HTM )  ' color: black;'
.  write ( HTM )  '}'
.  write ( HTM )  'h1 {'
.  write ( HTM )  ' text-align: center;'
.  write ( HTM )  ' padding: 10px 0px 10px 0px;'
.  write ( HTM )  ' margin: 0px;'
.  write ( HTM )  '}'

.  write ( HTM )  'h2 {'
.  write ( HTM )  ' text-align: center;'
.  write ( HTM )  ' padding: 10px;'
.  write ( HTM )  ' margin: 0px;'
.  write ( HTM )  '}'
.  write ( HTM )  'h4 {text-align: center;}'
.  write ( HTM )  'h5 {'
.  write ( HTM )  ' background-color: orange;'
.  write ( HTM )  ' border: 1px solid black;'
.  write ( HTM )  ' padding: 10px;'
.  write ( HTM )  ' margin: 0px 0px 30px 0px;'
.  write ( HTM )  ' text-align: right;'
.  write ( HTM )  '}'
.  write ( HTM )  'p {'
.  write ( HTM )  ' margin-top: .5em;'
.  write ( HTM )  ' margin-bottom: .5em;'
.  write ( HTM )  '}'
.  write ( HTM )  'hr.record { width:50%;}'
.  write ( HTM )  'hr.variable { border-top:1px dotted #ccc;'
.  write ( HTM )  ' color: #ffffff;'
.  write ( HTM )  ' bakcground-color: #ffffff;'
.  write ( HTM )  '}'
.  write ( HTM )  'table {border: 5px solid #555;'
.  write ( HTM )  ' border-radius: 5px;'
.  write ( HTM )  ' border-collapse: collapse;'
.  write ( HTM )  ' width: 100%;'
.  write ( HTM )  ' padding: 15px;'
.  write ( HTM )  ' margin-bottom: 20px;'
.  write ( HTM )  '}'
.  write ( HTM )  'th  {'
.  write ( HTM )  ' background-color:' HTML_BLUE1 ';'
.  write ( HTM )  ' font-weight:bold;'
.  write ( HTM )  ' padding:15px;'
.  write ( HTM )  '}'
.  write ( HTM )  'tr:nth-child(even) {background-color: #EEEEEE;}'
.  write ( HTM )  'tr:hover, tr:nth-child(even):hover{'
.  write ( HTM )  ' background-color: #DDDDDD;'
.  write ( HTM )  '}'
.  write ( HTM )  'td {border: 0px; padding:5px 15px 5px 15px;}'
.  write ( HTM )  'ul {padding-left: 75px; margin-top:0px; margin-bottom:0px;}'
.  write ( HTM )  'li {list-style-type: none; display: inline-block;margin-right:15px;margin-bottom:10px;}'
.  write ( HTM )  '.entire_rec {'
.  write ( HTM )  ' padding: 20px 0px 20px 0px;'
.  write ( HTM )  ' background-color:' HTML_YELLOW1 ';'
.  write ( HTM )  ' border: 1px solid #EEEEEE;'
.  write ( HTM )  ' border-radius: 5px;'
.  write ( HTM )  '}'
.  write ( HTM )  '#table_number {'
.  write ( HTM )  ' float: left;'
.  write ( HTM )  ' padding: 15px;'
.  write ( HTM )  ' font-weight:bold;'
.  write ( HTM )  '}'
.  write ( HTM )  '.ALL_VAR_INFO {padding: 5px 20px 5px 20px;}'
.  write ( HTM )  '.ALL_VAR_INFO:hover {background-color: #fbeccb;}'
.  write ( HTM )  '.IMPORTANT_VAR {'
.  write ( HTM )  ' font-size: 1.3em;'
.  write ( HTM )  ' font-weight: bold;'
.  write ( HTM )  '}'
.  write ( HTM )  '.IMPORTANT_VAR:hover {background-color:' HTML_YELLOW2 ';}'
.  write ( HTM )  '.button {'
.  write ( HTM )  ' color: #000000;'
.  write ( HTM )  ' border: solid 1px #da7c0c;'
.  write ( HTM )  ' background: #f78d1d;'
.  write ( HTM )  ' display: inline-block;'
.  write ( HTM )  ' float: right;'
.  write ( HTM )  ' outline: none;'
.  write ( HTM )  ' text-align: center;'
.  write ( HTM )  ' text-decoration: none;'
.  write ( HTM )  ' font: 14px/100% Arial,  Helvetica,  sans-serif;'
.  write ( HTM )  ' padding: .5em 2em .55em;'
.  write ( HTM )  ' text-shadow: 0 1px 1px rgba( 0, 0, 0, .3 );'
.  write ( HTM )  ' border-radius: .5em;'
.  write ( HTM )  ' box-shadow: 0 1px 2px rgba( 0, 0, 0, .2 );'
.  write ( HTM )  ' margin: -5px;'
.  write ( HTM )  '}'
.  write ( HTM )  '.button:hover {'
.  write ( HTM )  ' text-decoration: none;'
.  write ( HTM )  ' background: #f2741a;'
.  write ( HTM )  '}'
.  write ( HTM )  '.button:active {'
.  write ( HTM )  ' position: relative;'
.  write ( HTM )  ' top: 1px;'
.  write ( HTM )  '}'


.  write ( HTM )  '.COL1   {'
.  write ( HTM )  ' background-color:' HTML_BLACK1 ';'
.  write ( HTM )  ' border: 1px solid black;'
.  write ( HTM )  ' text-align: center;'
.  write ( HTM )  ' width: 50px;'
.  write ( HTM )  '}'
.  write ( HTM )  '.COL2   {'
.  write ( HTM )  ' background-color:' HTML_YELLOW1 ';'
.  write ( HTM )  ' border: 1px solid black;'
.  write ( HTM )  ' width: 50px;'
.  write ( HTM )  ' text-align: left;'
.  write ( HTM )  '}'
.  write ( HTM )  '.VARNAME   {'
.  write ( HTM )  ' font-style: normal;'
.  write ( HTM )  ' font-weight: bold;'
.  write ( HTM )  '}'
.  write ( HTM )  '.VARLABEL   {'
.  write ( HTM )  ' color: #222222;'
.  write ( HTM )  ' font-style: italic;'
.  write ( HTM )  ' font-weight: bold;'
.  write ( HTM )  '}'
.  write ( HTM )  '.VALVALUE   {'
.  write ( HTM )  ' color: #222222;'
.  write ( HTM )  ' font-weight: bold;'
.  write ( HTM )  '}'
.  write ( HTM )  '.VALLABEL   {'
.  write ( HTM )  ' color: #222222;'
.  write ( HTM )  ' font-style: italic;'
.  write ( HTM )  ' font-weight: normal;'
.  write ( HTM )  '}'
.  write ( HTM )  '.VALLABEL:hover   {color:' HTML_RED3 ';}'
.  write ( HTM )  '.recordtype{'
.  write ( HTM )  ' border: 5px solid #555;'
.  write ( HTM )  ' border-radius: 5px;'
.  write ( HTM )  ' padding: 10px;'
.  write ( HTM )  ' margin-bottom: 15px;'
.  write ( HTM )  '}'
.  write ( HTM )  '.indent1 {padding-left: 10px;}'
.  write ( HTM )  '.indent2 {padding-left: 25px;}'
.  write ( HTM )  '.indent3 {padding-left: 45px;}'
.  write ( HTM )  '</style>'
.  write ( HTM )  '</head>'
. end subprocedure
|
. subprocedure REPLACE_HTML
.  REPLACE$ = trimlr( REPLACE$ )
.  REPLACE$ = replace( REPLACE$, '<', '&lt;', 5, 1, 0 )
.  REPLACE$ = replace( REPLACE$, '>', '&gt;', 5, 1, 0 )
.  REPLACE$ = replace( REPLACE$, '`', "'", 5, 1, 0 )
.  REPLACE$ = replace( REPLACE$, '&', '&amp;', 5, 1, 0 )
.  REPLACE$ = replace( REPLACE$, char( 150 ), '-', 5, 0, 0 )
.  REPLACE$ = replace( REPLACE$, char( 160 ), char( 32 ), 5, 0, 0 )
.  LETTERS# = len( REPLACE$ )
.  for LETTER# = 1, LETTERS#
.   LETTER$ = sbst( REPLACE$, LETTER#, 1 )
.   ifthen ( ichar( LETTER$ ) > 126 or ichar( LETTER$ ) < 32 )
.    REPLACE$ = replace( REPLACE$, LETTER$, ' ', 1, 0, 0 )
.   endif
.  end for
. end subprocedure REPLACE_HTML
|
end program
END PROCEDURE
