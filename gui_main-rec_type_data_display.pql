PROCEDURE      GUI_MAIN.REC_TYPE_DATA_DISPLAY:T  (157965,53848)  |Last amended Apr 12, 2015,14:57:28
| The data must already be in the referenced array
| everything you need to refresh keys
|
subprocedure MASTER_REFRESH_KEYS
. ifthen( exists( REC_TYPE_NUM) eq 0)
.   write 'REC_TYPE_NUM is not set'
.   exit subprocedure
. endif
c . if( nkeys( REC_TYPE_NUM) eq 0)  exit subprocedure              | NO KEYS - NO REASON TO RUN
c . if( gettxt( OLD_KEY_LIST_1) eq 'No data') exit subprocedure    | No records with data
. if( getfocus(0) eq OLD_KEY_LIST_4)   exit subprocedure        | LAST KEY, NO NEED TO GET MORE DATA
. ifthen ( dbtype(0) eq 1)
.   if ( 0 eq len(CASE_VALUE) OR exists(CASE_VALUE) ) WRITE 'ERROR NO CASE ID'; exit subprocedure
. endif
. execute subprocedure SET_MATCH_VALUES
. execute subprocedure CREATE_MATCHED_KEY_ARRAYS
. execute subprocedure REFRESH_KEYS
end subprocedure
|
subprocedure CREATE_MATCHED_KEY_ARRAYS
<comment> write '--------   Create Match Key Arrays --------'
. if (KEY_COUNT + dbtype(0) lt 1) exit subprocedure
. FIRST_MATCH = 0 | no matching row yet
. set REC_KEY_LIST_POINTER * (1)  | starting position for each key list
. set REC_KEY_LIST * (missing)
. for EACH_DB_ROW = 1, DB_ROW
|   check each row to see if it matches the criteria.  If yes, grab all key values
.   if ( FIRST_MATCH eq 0 ) execute subprocedure CHECK_ALL_MATCH_CRITERIA
.   for EACH_KEY = 1 + dbtype(0), KEY_COUNT + dbtype(0)
.     current_KEY_VALUE = DB_REC_KEYS (EACH_DB_ROW, EACH_KEY)
.     execute subprocedure PREVIOUS_KEYS_MATCH
.     ifthen  ( PREVIOUS_KEYS_MATCH = 0 )
.       exit for | all key values before this value must match
.     endif
.     execute subprocedure IS_KEY_VALUE_UNIQUE    | if unique add to list
.   end for
. end for
end subprocedure
|
|
subprocedure CHECK_ALL_MATCH_CRITERIA
<comment> write '------ Looking for First Match   ----------'
. if(FIRST_MATCH eq 1) exit subprocedure | values already set
. ifthen (KEY_REFRESH_START eq 1 + dbtype(0) ) | special rule for first keys- grab first row
.   FIRST_MATCH = 1
. else | if all keys upto match key match set flag
<comment> write 'checking for matches. Key1: ' MATCH_VALUE( 1 ) MATCH_VALUE( 2 ) MATCH_VALUE( 3 )
.   for MATCH_KEY = 1 + dbtype(0), KEY_REFRESH_START - 1
.     ifthen(  MATCH_VALUE( MATCH_KEY - dbtype(0) ) = DB_REC_KEYS (EACH_DB_ROW, MATCH_KEY) )
.       FIRST_MATCH = 1
.     else
.       FIRST_MATCH = 0
.       exit subprocedure
.     endif
.   end for
. endif
. ifthen (FIRST_MATCH eq 1) | set all of the match values.
<comment> write 'settting match criteria: '
.   for MATCH_KEY = 1 + dbtype(0), KEY_COUNT + dbtype(0)
<comment> write 'key ' MATCH_KEY ' value ' DB_REC_KEYS (EACH_DB_ROW, MATCH_KEY)
.       MATCH_VALUE( MATCH_KEY ) = DB_REC_KEYS (EACH_DB_ROW, MATCH_KEY)
.   end for
. endif
end subprocedure
|
|
subprocedure PREVIOUS_KEYS_MATCH
<comment> write'-----------   PREVIOUS_KEYS_MATCH   ---------------'
. ifthen (EACH_KEY eq 1 + dbtype(0) ) | special rule for first keys
.   PREVIOUS_KEYS_MATCH = 1
.   exit subprocedure
. endif
. PREVIOUS_KEYS_MATCH = 0
. for check_key = 1 + dbtype(0), EACH_KEY - 1  | Check all keys up to but not including current key
<comment> write 'checking key: ' check_key '.  db value: ' DB_REC_KEYS (EACH_DB_ROW, check_key ) ' and match value: ' MATCH_VALUE (check_key)
.   ifthen ( DB_REC_KEYS (EACH_DB_ROW, CHECK_KEY ) eq MATCH_VALUE (check_key) )
.     PREVIOUS_KEYS_MATCH = 1
.   else
.     PREVIOUS_KEYS_MATCH = 0
.     exit subprocedure | can exit immediately when a single match fails
.  endif
. end for
end subprocedure
|
|
subprocedure IS_KEY_VALUE_UNIQUE
. for EACH_ELEMENT = 1, REC_KEY_LIST_POINTER(EACH_KEY)
.   ifthen ( REC_KEY_LIST ( EACH_ELEMENT, EACH_KEY ) eq current_KEY_VALUE )
.     exit subprocedure | value is already in list move on.
.   endif
. end for
. REC_KEY_LIST (REC_KEY_LIST_POINTER(EACH_KEY), EACH_KEY ) = current_KEY_VALUE
. REC_KEY_LIST_POINTER(EACH_KEY) = REC_KEY_LIST_POINTER(EACH_KEY) + 1
end subprocedure
|
|
SUBPROCEDURE REFRESH_KEYS
| here cycle through keys, start with first that needs to be updated. append list
<comment> write '-----------   show values to update -----------'
<comment> write 'Refresh Keys: DB_ROW = ' DB_ROW
<comment> write 'These keys: ' KEY_REFRESH_START  ' - ' [KEY_COUNT + dbtype(0)]

ifthen (DB_ROW eq 0 )
. append item OLD_KEY_LIST_1, "No data"
. exit subprocedure
endif
<comment> write 'refresh starts at ' KEY_REFRESH_START
. ifthen ( KEY_REFRESH_START le 1 + dbtype(0) )
.   remove all OLD_KEY_LIST_1
. endif
. if ( KEY_REFRESH_START le 2 + dbtype(0) ) remove all OLD_KEY_LIST_2
. if ( KEY_REFRESH_START le 3 + dbtype(0) ) remove all OLD_KEY_LIST_3
. if ( KEY_REFRESH_START le 4 + dbtype(0) ) remove all OLD_KEY_LIST_4


. for EACH_KEY = KEY_REFRESH_START , KEY_COUNT + dbtype(0)
.   for each_row = 1, REC_KEY_LIST_POINTER(EACH_KEY) - 1
.       KEY_NAME = keyname( REC_TYPE_NUM, EACH_KEY )
.       KEY_VALUE = REC_KEY_LIST( each_row, EACH_KEY )
.       KEY_VTYPE = vtype( REC_TYPE_NUM, KEY_NAME )
.       ifthen ( KEY_VTYPE eq 1 or 3 or 4)
.         KEY_VALUE_LABEL = trim( fst( vallabsc ( REC_TYPE_NUM, KEY_NAME, KEY_VALUE), "" ) )
.       else
.         KEY_VALUE_LABEL = trim( fst( vallabsc ( REC_TYPE_NUM, KEY_NAME, numbr( KEY_VALUE ) ) , "" ) )
.       endif
.       DISPLAY_TEXT = KEY_VALUE +  CHAR(9)+ KEY_VALUE_LABEL
.       if(EACH_KEY eq 1 + dbtype(0) ) append item OLD_KEY_LIST_1, DISPLAY_TEXT
.       if(EACH_KEY eq 2 + dbtype(0) ) append item OLD_KEY_LIST_2, DISPLAY_TEXT
.       if(EACH_KEY eq 3 + dbtype(0) ) append item OLD_KEY_LIST_3, DISPLAY_TEXT
.       if(EACH_KEY eq 4 + dbtype(0) ) append item OLD_KEY_LIST_4, DISPLAY_TEXT
.   end for
. end for
end subprocedure
|
|
subprocedure SET_MATCH_VALUES
. set MATCH_VALUE * (missing)
. START_KEY = 1
. if (gettxt(OLD_KEY_LIST_1) EQ 'No data' ) exit subprocedure | No data
C . if (exists(gettxt(OLD_KEY_LIST_1)) EQ 0 ) exit subprocedure | No text appended to OLD_KEY_LIST_1

. ifthen( getfocus(0) eq OLD_KEY_LIST_1 )
.  MATCH_VALUE (1) = KEY_VALUE_1
.  START_KEY = 2
. elseif( getfocus(0) eq OLD_KEY_LIST_2 )
.   MATCH_VALUE (1) = KEY_VALUE_1
.   MATCH_VALUE (2) = KEY_VALUE_2
.   START_KEY = 3
. elseif( getfocus(0) eq OLD_KEY_LIST_3 )
.   MATCH_VALUE (1) = KEY_VALUE_1
.   MATCH_VALUE (2) = KEY_VALUE_2
.   MATCH_VALUE (3) = KEY_VALUE_3
.   START_KEY = 4
. endif
. KEY_REFRESH_START = START_KEY + dbtype(0) | note CASEID is first key
<comment> write 5t 'key refresh starts at: ' KEY_REFRESH_START ' which is actually key: ' START_KEY
<comment> write 5t 'match values: ' MATCH_VALUE (1) MATCH_VALUE (2) MATCH_VALUE (3)  //
end subprocedure
END PROCEDURE
