PROCEDURE      GUI_MAIN.ALL_COMMANDS:T  (157627,37284)  |Last amended May 09, 2014,10:21:24
|| Generated by DP - don't edit anything outside |{...|}

|{ Header
CALL GUIPROCF.SYSTEM.DEL_FILE_ATT
CALL GUIPROCF.GUI_MAIN.INITIALIZE
CALL GUIPROCF.SYSTEM.ALLRECS
CALL GUIPROCF.GUI_MAIN.CUSTOM_INI
RETRIEVAL UPDATE NOAUTOCASE |program crwarn
|}

integer*2 m_id, m_arg1, m_arg2

integer*1 IDSTATIC; preset IDSTATIC (-1)
integer*1 IDCLOSE ; preset IDCLOSE  ( 0)
integer*1 I_AGREE                         ; preset I_AGREE                          (1 )
integer*1 I_DISAGREE                      ; preset I_DISAGREE                       (2 )
integer*1 DB_TITLE                        ; preset DB_TITLE                         (3 )
integer*1 DB_FOOTER                       ; preset DB_FOOTER                        (4 )
integer*1 CASE_SEARCH                     ; preset CASE_SEARCH                      (5 )
integer*1 CASE_LIST                       ; preset CASE_LIST                        (6 )
integer*1 CASE_NEW                        ; preset CASE_NEW                         (7 )
integer*1 CASE_INFO                       ; preset CASE_INFO                        (8 )
integer*1 CASE_SEARCHLABEL                ; preset CASE_SEARCHLABEL                 (9 )
integer*1 CASE_LISTLABEL                  ; preset CASE_LISTLABEL                   (10 )
integer*1 CASE_NEWLABEL                   ; preset CASE_NEWLABEL                    (11 )
integer*1 CASE_SEARCHBOX                  ; preset CASE_SEARCHBOX                   (12 )
integer*1 CASE_NEWBOX                     ; preset CASE_NEWBOX                      (13 )
integer*1 CASE_LISTBOX                    ; preset CASE_LISTBOX                     (14 )
integer*1 CASE_BREAD_CRUMB                ; preset CASE_BREAD_CRUMB                 (15 )
integer*1 TIME_LABEL                      ; preset TIME_LABEL                       (16 )
integer*1 GUI_VERSION                     ; preset GUI_VERSION                      (17 )
integer*1 DBA_PAGE                        ; preset DBA_PAGE                         (18 )
integer*1 CASE_NEWB                       ; preset CASE_NEWB                        (19 )
integer*1 FORM_LIST                       ; preset FORM_LIST                        (20 )
integer*1 FORM_INFO                       ; preset FORM_INFO                        (21 )
integer*1 REC_BREAD_CRUMB                 ; preset REC_BREAD_CRUMB                  (22 )
integer*1 OPTIONS                         ; preset OPTIONS                          (23 )
integer*1 PAGE_TABLE                      ; preset PAGE_TABLE                       (24 )
integer*1 PAGE_CASEIDS                    ; preset PAGE_CASEIDS                     (25 )
integer*1 PAGE_OLD_KEYS                   ; preset PAGE_OLD_KEYS                    (26 )
integer*1 PAGE_NEW_KEYS                   ; preset PAGE_NEW_KEYS                    (27 )
integer*1 PAGE_DBA                        ; preset PAGE_DBA                         (28 )
integer*1 LOG_OUT                         ; preset LOG_OUT                          (29 )
integer*1 OLD_KEY_LABEL_1                 ; preset OLD_KEY_LABEL_1                  (30 )
integer*1 OLD_KEY_LIST_1                  ; preset OLD_KEY_LIST_1                   (31 )
integer*1 OLD_KEY_LABEL_2                 ; preset OLD_KEY_LABEL_2                  (32 )
integer*1 OLD_KEY_LIST_2                  ; preset OLD_KEY_LIST_2                   (33 )
integer*1 OLD_KEY_LABEL_3                 ; preset OLD_KEY_LABEL_3                  (34 )
integer*1 OLD_KEY_LIST_3                  ; preset OLD_KEY_LIST_3                   (35 )
integer*1 OLD_KEY_LABEL_4                 ; preset OLD_KEY_LABEL_4                  (36 )
integer*1 OLD_KEY_LIST_4                  ; preset OLD_KEY_LIST_4                   (37 )
integer*1 NEW_KEY_LABEL_1                 ; preset NEW_KEY_LABEL_1                  (38 )
integer*1 NEW_KEY_CHOICE_1                ; preset NEW_KEY_CHOICE_1                 (39 )
integer*1 NEW_KEY_LABEL_2                 ; preset NEW_KEY_LABEL_2                  (40 )
integer*1 NEW_KEY_CHOICE_2                ; preset NEW_KEY_CHOICE_2                 (41 )
integer*1 NEW_KEY_LABEL_3                 ; preset NEW_KEY_LABEL_3                  (42 )
integer*1 NEW_KEY_CHOICE_3                ; preset NEW_KEY_CHOICE_3                 (43 )
integer*1 NEW_KEY_LABEL_4                 ; preset NEW_KEY_LABEL_4                  (44 )
integer*1 NEW_KEY_CHOICE_4                ; preset NEW_KEY_CHOICE_4                 (45 )
integer*1 NEW_KEY_VAR_MAP_1               ; preset NEW_KEY_VAR_MAP_1                (46 )
integer*1 NEW_KEY_VAR_MAP_2               ; preset NEW_KEY_VAR_MAP_2                (47 )
integer*1 NEW_KEY_VAR_MAP_3               ; preset NEW_KEY_VAR_MAP_3                (48 )
integer*1 NEW_KEY_VAR_MAP_4               ; preset NEW_KEY_VAR_MAP_4                (49 )
integer*1 NEW_KEY_VALUE_1                 ; preset NEW_KEY_VALUE_1                  (50 )
integer*1 NEW_KEY_VALUE_2                 ; preset NEW_KEY_VALUE_2                  (51 )
integer*1 NEW_KEY_VALUE_3                 ; preset NEW_KEY_VALUE_3                  (52 )
integer*1 NEW_KEY_VALUE_4                 ; preset NEW_KEY_VALUE_4                  (53 )
integer*1 USER_NAME                       ; preset USER_NAME                        (54 )
integer*1 DBA_NAME                        ; preset DBA_NAME                         (55 )
integer*1 DIALOG_BORDER                   ; preset DIALOG_BORDER                    (56 )
integer*1 REC_SELECT_LABEL                ; preset REC_SELECT_LABEL                 (57 )
integer*1 DEFAULT_BUTTON                  ; preset DEFAULT_BUTTON                   (58 )
integer*1 REC_TYPE_SELECTED               ; preset REC_TYPE_SELECTED                (59 )
integer*1 CASE_BREAD_CRUMBOX              ; preset CASE_BREAD_CRUMBOX               (60 )
integer*1 CASE_SEARCHB                    ; preset CASE_SEARCHB                     (61 )
integer*1 NEW_REC_HELP                    ; preset NEW_REC_HELP                     (62 )
integer*1 ID_00009                        ; preset ID_00009                         (63 )
integer*1 NEW_REC_BUTTON                  ; preset NEW_REC_BUTTON                   (64 )
integer*1 NEW_REC_CANCEL                  ; preset NEW_REC_CANCEL                   (65 )
integer*1 PAGE_CASE_DELETE                ; preset PAGE_CASE_DELETE                 (66 )
integer*1 DEBUG_CODE                      ; preset DEBUG_CODE                       (67 )
integer*1 SPLASH_TEXT                     ; preset SPLASH_TEXT                      (68 )
integer*1 ID_00011                        ; preset ID_00011                         (69 )
integer*1 ID_00013                        ; preset ID_00013                         (70 )
integer*1 REC_BREAD_CRUMB_BOX             ; preset REC_BREAD_CRUMB_BOX              (71 )
integer*1 REC_TABLE_DATA                  ; preset REC_TABLE_DATA                   (72 )
integer*1 TABLE_KEY_LABEL_1               ; preset TABLE_KEY_LABEL_1                (73 )
integer*1 TABLE_KEY_LABEL_2               ; preset TABLE_KEY_LABEL_2                (74 )
integer*1 TABLE_KEY_LABEL_3               ; preset TABLE_KEY_LABEL_3                (75 )
integer*1 TABLE_KEY_LABEL_4               ; preset TABLE_KEY_LABEL_4                (76 )
integer*1 DELETE_CASE_LABEL               ; preset DELETE_CASE_LABEL                (77 )
integer*1 CASE_DELETE_INFO                ; preset CASE_DELETE_INFO                 (78 )
integer*1 CASE_DELETE_REASON              ; preset CASE_DELETE_REASON               (79 )
integer*1 CASE_DELETE_BUTTON              ; preset CASE_DELETE_BUTTON               (80 )
integer*1 ID_00017                        ; preset ID_00017                         (81 )
integer*1 CASE_DELETE_WARNING             ; preset CASE_DELETE_WARNING              (82 )
integer*1 CASE_REC_WARNING                ; preset CASE_REC_WARNING                 (83 )
integer*1 OLD_REC_COUNTER_LABEL           ; preset OLD_REC_COUNTER_LABEL            (84 )
integer*1 OLD_REC_COUNTER                 ; preset OLD_REC_COUNTER                  (85 )
integer*1 TABLE_VIEW_SPREADSHEET          ; preset TABLE_VIEW_SPREADSHEET           (86 )
integer*1 ID_00019                        ; preset ID_00019                         (87 )
integer*1 DELETE_CASE_BACK                ; preset DELETE_CASE_BACK                 (88 )
integer*1 TABLE_VIEW_HELP                 ; preset TABLE_VIEW_HELP                  (89 )
integer*1 LOCK_STATUS_LABEL               ; preset LOCK_STATUS_LABEL                (90 )
integer*1 VIEW_FORM                       ; preset VIEW_FORM                        (91 )
integer*1 GUI_PAGE                        ; preset GUI_PAGE                         (92 )
integer*1 PAGE_HIDDEN                     ; preset PAGE_HIDDEN                      (93 )
integer*1 BACK_TO_ADMIN                   ; preset BACK_TO_ADMIN                    (94 )
integer*1 DEBUG_LABEL                     ; preset DEBUG_LABEL                      (95 )
integer*1 DEBUG_ON_OFF                    ; preset DEBUG_ON_OFF                     (96 )
integer*1 ID_00029                        ; preset ID_00029                         (97 )
integer*1 ID_00030                        ; preset ID_00030                         (98 )
integer*1 ID_00032                        ; preset ID_00032                         (99 )
integer*1 MEGA_CASE_LABEL                 ; preset MEGA_CASE_LABEL                  (100 )
integer*1 ID_00033                        ; preset ID_00033                         (101 )
integer*1 CU_IMGAGE                       ; preset CU_IMGAGE                        (102 )
integer*1 ID_00037                        ; preset ID_00037                         (103 )
integer*1 SCREEN_COMPILE                  ; preset SCREEN_COMPILE                   (104 )
integer*1 MASTER_DISPLAY                  ; preset MASTER_DISPLAY                   (105 )
integer*1 GET_MASTER_INFO                 ; preset GET_MASTER_INFO                  (106 )
integer*1 GUI_OPTION                      ; preset GUI_OPTION                       (107 )
integer*1 ID_00043                        ; preset ID_00043                         (108 )
integer*1 ID_00044                        ; preset ID_00044                         (109 )
integer*1 ID_00045                        ; preset ID_00045                         (110 )
integer*1 YELLOW_BOX                      ; preset YELLOW_BOX                       (111 )
integer*1 COMPILE_LABEL                   ; preset COMPILE_LABEL                    (112 )
integer*1 ALLCALL_SYS                     ; preset ALLCALL_SYS                      (113 )
integer*1 DB_INFO_LABEL                   ; preset DB_INFO_LABEL                    (114 )
integer*1 ID_00047                        ; preset ID_00047                         (115 )
integer*1 VIEW_CODEBOOK_LABEL             ; preset VIEW_CODEBOOK_LABEL              (116 )
integer*1 SCHEMA_LABEL                    ; preset SCHEMA_LABEL                     (117 )
integer*1 ID_00049                        ; preset ID_00049                         (118 )
integer*1 DCC_VARS_LABEL                  ; preset DCC_VARS_LABEL                   (119 )
integer*1 ID_00050                        ; preset ID_00050                         (120 )
integer*1 CASE_MOVER                      ; preset CASE_MOVER                       (121 )
integer*1 CASE_MOVER_LABEL                ; preset CASE_MOVER_LABEL                 (122 )
integer*1 USE_GUI_RC                      ; preset USE_GUI_RC                       (123 )
integer*2 USE_GUI_PG                      ; preset USE_GUI_PG                       (124 )
integer*2 DB_LOCKER                       ; preset DB_LOCKER                        (125 )
integer*2 DB_UNLOCKER                     ; preset DB_UNLOCKER                      (126 )
integer*2 DB_LOCK_LABEL                   ; preset DB_LOCK_LABEL                    (127 )
integer*2 COMMENT_SHOW                    ; preset COMMENT_SHOW                     (128 )
integer*2 CHANGE_USER_LABEL               ; preset CHANGE_USER_LABEL                (129 )
integer*2 CHANGE_USER                     ; preset CHANGE_USER                      (130 )
integer*2 CHANGE_USER_APPLY               ; preset CHANGE_USER_APPLY                (131 )
integer*2 CHANGE_USER_SECLEV              ; preset CHANGE_USER_SECLEV               (132 )
integer*2 ID_00051                        ; preset ID_00051                         (133 )
integer*2 USER_NAME_EVERY_PAGE            ; preset USER_NAME_EVERY_PAGE             (134 )
integer*2 TURN_DEBBUGER_ON                ; preset TURN_DEBBUGER_ON                 (135 )
integer*2 POP_UP_DEBUG_INFO               ; preset POP_UP_DEBUG_INFO                (136 )
integer*2 ID_00052                        ; preset ID_00052                         (137 )
integer*2 REC_FORM_SELECTED               ; preset REC_FORM_SELECTED                (138 )
integer*2 REC_DELETE_SELECTION_LABEL      ; preset REC_DELETE_SELECTION_LABEL       (139 )
integer*2 REC_SELECTION_CRITERIA          ; preset REC_SELECTION_CRITERIA           (140 )
integer*2 CASE_DELETE_REFRESH             ; preset CASE_DELETE_REFRESH              (141 )
integer*2 PAGE_BULK_RECORD                ; preset PAGE_BULK_RECORD                 (142 )
integer*2 ID_00053                        ; preset ID_00053                         (143 )
integer*2 TABEL_LABEL                     ; preset TABEL_LABEL                      (144 )
integer*2 SCREEN_LABEL                    ; preset SCREEN_LABEL                     (145 )
integer*2 ID_00054                        ; preset ID_00054                         (146 )
integer*2 SPLASH_HEADER                   ; preset SPLASH_HEADER                    (147 )
integer*2 MAKE_SCREENS                    ; preset MAKE_SCREENS                     (148 )
integer*2 ID_00055                        ; preset ID_00055                         (149 )
integer*2 MAKE_SCREEN_LIST                ; preset MAKE_SCREEN_LIST                 (150 )
integer*2 ID_00057                        ; preset ID_00057                         (151 )
integer*2 ID_00058                        ; preset ID_00058                         (152 )
integer*2 MAKE_CODEBOOK                   ; preset MAKE_CODEBOOK                    (153 )
integer*2 ID_00059                        ; preset ID_00059                         (154 )
integer*2 ID_00060                        ; preset ID_00060                         (155 )
integer*2 ID_00061                        ; preset ID_00061                         (156 )
integer*2 MAKE_CUSTOM_REC_LIST            ; preset MAKE_CUSTOM_REC_LIST             (157 )
integer*2 ID_00062                        ; preset ID_00062                         (158 )
integer*1 m_page; preset m_page (1)

|{ Prologue
|}

dialog "List View Title"

|{ Controls
postype 1
button   I_AGREE                         , 318,       86, 124, 0, "Continue"
button   I_DISAGREE                      , 318,      266, 124, 0, "Exit"
text     DB_TITLE                        ,   0,  18,   0, 488, 1
text     DB_FOOTER                       , 370,  20,   0, 488, 0
edit     CASE_SEARCH                     , 105,       33, 145, 0, 0
list     CASE_LIST                       ,  88, 220, 305, 164, 0
edit     CASE_NEW                        , 189,       33, 145, 0, 0
text     CASE_INFO                       ,  88,  48,  23, 247, 0
label    CASE_SEARCHLABEL                ,  78,       15, 272, "Find Subject:"
label    CASE_LISTLABEL                  ,  77,      305, 164, "Case List Label"
label    CASE_NEWLABEL                   , 163,       15, 272, "New ID:"
line     CASE_SEARCHBOX                  ,  77,  64,  14, 274
line     CASE_NEWBOX                     , 163,  64,  14, 274
line     CASE_LISTBOX                    ,  77,  11, 305, 164
text     CASE_BREAD_CRUMB                ,  46,  19,  11, 118, 0
label    TIME_LABEL                      , 357,        5,  88, "10 minutes until time out."
label    GUI_VERSION                     , 356,      445,  40, "Version 4.1"
label    DBA_PAGE                        ,  45,       33, 133, "DBA Only Page"
button   CASE_NEWB                       , 189,      182,  83, 0, "Create"
list     FORM_LIST                       , 137, 160,  23, 247, 0
text     FORM_INFO                       , 313,  44,  23, 247, 0
text     REC_BREAD_CRUMB                 ,  46,  19, 135, 345, 0
button   OPTIONS                         ,  19,      376,  53, 0, "Options"
button   PAGE_TABLE                      ,  65,      413,  66, 0, "Table"
button   PAGE_CASEIDS                    ,  19,       11, 118, 0, "Subjects"
button   PAGE_OLD_KEYS                   ,  19,      134, 118, 0, "Forms"
button   PAGE_NEW_KEYS                   ,  65,      344,  68, 0, "New"
button   PAGE_DBA                        ,  19,      256,  77, 0, "DBA"
button   LOG_OUT                         ,  19,      429,  56, 0, "Log Out"
label    OLD_KEY_LABEL_1                 ,  91,      305, 171, " KEY1L"
list     OLD_KEY_LIST_1                  , 101,  68, 305, 171, 0
label    OLD_KEY_LABEL_2                 , 173,      305, 171, " KEY2L"
list     OLD_KEY_LIST_2                  , 183,  68, 305, 171, 0
label    OLD_KEY_LABEL_3                 , 255,      305, 171, " KEY3L"
list     OLD_KEY_LIST_3                  , 265,  49, 305, 171, 0
label    OLD_KEY_LABEL_4                 , 321,      305, 171, " KEY4L"
list     OLD_KEY_LIST_4                  , 331,  32, 305, 171, 0
label    NEW_KEY_LABEL_1                 , 122,       96, 289, " KEY1L"
choice   NEW_KEY_CHOICE_1                , 135,      213, 157
label    NEW_KEY_LABEL_2                 , 181,       96, 289, " KEY2L"
choice   NEW_KEY_CHOICE_2                , 193,      213, 157
label    NEW_KEY_LABEL_3                 , 241,       96, 289, " KEY3L"
choice   NEW_KEY_CHOICE_3                , 254,      213, 157
label    NEW_KEY_LABEL_4                 , 301,       96, 289, " KEY4L"
choice   NEW_KEY_CHOICE_4                , 314,      213, 157
label    NEW_KEY_VAR_MAP_1               , 150,      129, 256, "New Key Help 1"
label    NEW_KEY_VAR_MAP_2               , 208,      129, 256, "New Key Help 2"
label    NEW_KEY_VAR_MAP_3               , 269,      129, 256, "New Key Help 3"
label    NEW_KEY_VAR_MAP_4               , 329,      129, 256, "New Key Help 4"
edit     NEW_KEY_VALUE_1                 , 135,      117,  91, 0, 0
edit     NEW_KEY_VALUE_2                 , 193,      117,  91, 0, 0
edit     NEW_KEY_VALUE_3                 , 254,      117,  91, 0, 0
edit     NEW_KEY_VALUE_4                 , 314,      117,  91, 0, 0
label    USER_NAME                       , 257,      190, 171, "USER_NAME"
label    DBA_NAME                        , 380,      374, 112, "DBA_NAME"
line     DIALOG_BORDER                   ,   0, 390,   0, 488
label    REC_SELECT_LABEL                ,  72,       38,  64, "  REC_SELECT_LABEL"
button   DEFAULT_BUTTON                  ,  50,      208,  88, 1, "Default Button"
choice   REC_TYPE_SELECTED               , 299,       62,  79
line     CASE_BREAD_CRUMBOX              ,  79,   2,  10, 118
button   CASE_SEARCHB                    , 105,      182,  83, 0, "Search"
label    NEW_REC_HELP                    , 100,       66, 356, "    Create a new record."
line     ID_00009                        ,  99, 253,  66, 356
button   NEW_REC_BUTTON                  ,  65,      346,  68, 0, "Create"
button   NEW_REC_CANCEL                  ,  65,      415,  64, 0, "Cancel"
button   PAGE_CASE_DELETE                ,  65,       87,  41, 0, "Delete"
edit     DEBUG_CODE                      , 354,       26, 239, 0, 0
text     SPLASH_TEXT                     ,  68, 171,  28, 431, 0
line     ID_00011                        , 305,   1, 147, 200
line     ID_00013                        ,  98, 248, 282,   1
line     REC_BREAD_CRUMB_BOX             ,  79,   2, 135, 345
list     REC_TABLE_DATA                  , 110, 164,  32, 428, 0
label    TABLE_KEY_LABEL_1               , 101,       44, 100, "Table Key Label 1"
label    TABLE_KEY_LABEL_2               , 101,      147, 100, "Table Key Label 1"
label    TABLE_KEY_LABEL_3               , 101,      250, 100, "Table Key Label 3"
label    TABLE_KEY_LABEL_4               , 101,      353, 124, "Table Key Label 4"
label    DELETE_CASE_LABEL               ,  92,       25, 292, "Delete Case Label"
text     CASE_DELETE_INFO                , 108, 186,  32, 428, 0
edit     CASE_DELETE_REASON              , 321,       44, 332, 0, 0
button   CASE_DELETE_BUTTON              , 320,      393,  53, 0, "Delete"
line     ID_00017                        , 296,  57,  33, 428
label    CASE_DELETE_WARNING             , 305,       44, 220, "Please provide a reason for the deletion."
label    CASE_REC_WARNING                , 338,      120, 256, "This will delete X records too!"
label    OLD_REC_COUNTER_LABEL           , 304,       33,  56, "Old Rec Counter"
label    OLD_REC_COUNTER                 , 314,       33,  76, "Old Rec Count #"
button   TABLE_VIEW_SPREADSHEET          ,  84,      277,  87, 0, "View All Data"
button   ID_00019                        ,  84,      372,  87, 0, "Back"
button   DELETE_CASE_BACK                ,  92,      372,  75, 0, "Back"
label    TABLE_VIEW_HELP                 , 278,       39, 232, "* Only displays key data."
label    LOCK_STATUS_LABEL               ,  35,      369, 112, "DATABASE  IS  LOCKED"
button   VIEW_FORM                       ,  65,      275,  68, 0, "View"
label    GUI_PAGE                        ,  58,       36, 160, "Some hidden gui elements"
button   PAGE_HIDDEN                     , 354,      270, 118, 0, "Hidden GUI page"
button   BACK_TO_ADMIN                   ,  50,      299, 148, 0, "Back to DB Admin Page"
label    DEBUG_LABEL                     , 192,       76, 142, "Debug on ( Y=1  N=0 )  <DEBUG_MODE>"
label    DEBUG_ON_OFF                    , 144,       30,  40, "Debug"
label    ID_00029                        , 328,       33, 136, "Note: Use Variable: REC_ROW_COUNT"
line     ID_00030                        , 291,  56,  27, 156
line     ID_00032                        ,  69, 208,  28, 121
label    MEGA_CASE_LABEL                 , 124,       33, 252, "MEGA CASE  LABEL"
label    ID_00033                        , 259,       50, 136, "I am the authorized user:"
image    CU_IMGAGE                       ,   1,  56,   1,  70, 1
line     ID_00037                        ,  59, 284,  25, 227
button   SCREEN_COMPILE                  , 300,      137, 112, 0, "Compile  All Screens"
text     MASTER_DISPLAY                  ,  92,  80, 258, 212, 0
button   GET_MASTER_INFO                 ,  78,      259, 100, 0, "Get Master Info"
label    GUI_OPTION                      , 107,       30,  76, "GUI Procfile"
line     ID_00043                        , 141,   1,  25, 227
line     ID_00044                        , 213,   1,  25, 227
line     ID_00045                        , 261,   1,  25, 227
label    YELLOW_BOX                      ,  68,      244,  28, "   ---->"
label    COMPILE_LABEL                   , 223,       30,  40, "Compile"
button   ALLCALL_SYS                     , 221,       76, 112, 0, "System AllCall"
label    DB_INFO_LABEL                   ,  45,      265, 196, "Database Info"
line     ID_00047                        ,  59, 284, 253, 227
button   VIEW_CODEBOOK_LABEL             , 199,      391,  76, 0, "View Codebook"
label    SCHEMA_LABEL                    , 186,      259,  40, "Schema"
button   ID_00049                        , 215,      271, 112, 0, "Modify Date Ranges"
button   DCC_VARS_LABEL                  , 231,      271, 112, 0, "Add DCC Vars"
line     ID_00050                        , 261,   1, 253, 227
button   CASE_MOVER                      , 269,      259, 100, 0, "Case Mover"
label    CASE_MOVER_LABEL                , 272,      361, 118, "Move data from one case to another"
check    USE_GUI_RC                      , 116,       44,  88, "Release Candidate"
check    USE_GUI_PG                      , 116,      147,  76, "Production GUI"
check    DB_LOCKER                       ,  89,       44,  88, "Locked"
check    DB_UNLOCKER                     ,  89,      147,  76, "Unlocked"
label    DB_LOCK_LABEL                   ,  79,       30,  76, "DB Lock Status:"
check    COMMENT_SHOW                    , 154,       44, 136, "Show Comments"
label    CHANGE_USER_LABEL               , 312,      261,  64, "Change Users"
edit     CHANGE_USER                     , 325,      281,  80, 0, 0
button   CHANGE_USER_APPLY               , 325,      424,  40, 0, "Apply"
choice   CHANGE_USER_SECLEV              , 325,      363,  44
label    ID_00051                        ,  68,      314,  28, "    ---->"
label    USER_NAME_EVERY_PAGE            , 346,        5, 160, "Signed in as: "
check    TURN_DEBBUGER_ON                , 166,       44, 136, "Debugger On"
check    POP_UP_DEBUG_INFO               , 178,       56, 124, "Pop Up Debug Info"
label    ID_00052                        , 357,        7,  17, "Code"
choice   REC_FORM_SELECTED               , 299,      187,  79
label    REC_DELETE_SELECTION_LABEL      , 360,       68,  60, "Selection Criteria"
edit     REC_SELECTION_CRITERIA          , 357,      132, 212, 0, 0
button   CASE_DELETE_REFRESH             , 357,      350,  52, 0, "Refresh"
button   PAGE_BULK_RECORD                , 290,      259, 100, 0, "Bulk Record Deletion"
label    ID_00053                        ,  45,       33, 133, "Bulk Record Deletions"
label    TABEL_LABEL                     , 302,       37,  24, "Table:"
label    SCREEN_LABEL                    , 302,      159,  27, "Screen:"
label    ID_00054                        , 285,       50, 400, "***  I understand that all database use is logged and monitored.   ***"
text     SPLASH_HEADER                   ,   0,  57,  71, 416, 0
button   MAKE_SCREENS                    , 323,      137, 111, 0, "Make ALL Screens"
label    ID_00055                        , 271,       30, 140, "Data Entry Screens"
choice   MAKE_SCREEN_LIST                , 283,       40,  92
button   ID_00057                        , 283,      137, 111, 0, "Make ONE Screen"
line     ID_00058                        , 318,   1, 147,  80
button   MAKE_CODEBOOK                   , 199,      271, 112, 0, "Make Codebook"
button   ID_00059                        ,  78,      420,  52, 0, "Discon MST."
button   ID_00060                        ,  78,      362,  55, 0, "Connect Master"
line     ID_00061                        , 178,   1, 253, 226
button   MAKE_CUSTOM_REC_LIST            , 315,       41,  88, 0, "Make Custom Rec List"
label    ID_00062                        ,  65,       54, 174, "Waiting for development time"
|}

initial
|{ Attribs
|< I_AGREE
. SET ITEM FONT I_AGREE,1,0,0, 1,""
. SET ITEM FONT I_AGREE,1,0,0, 1,""
. SET ITEM FONT I_AGREE,1,0,0, 1,""
. SET ITEM FONT I_AGREE,1,0,0, 1,""
. SET ITEM FONT I_AGREE,1,0,0, 1,""
|>
|< I_DISAGREE
. SET ITEM FONT I_DISAGREE,1,0,0, 1,""
. SET ITEM FONT I_DISAGREE,1,0,0, 1,""
. SET ITEM FONT I_DISAGREE,1,0,0, 1,""
. SET ITEM FONT I_DISAGREE,1,0,0, 1,""
. SET ITEM FONT I_DISAGREE,1,0,0, 1,""
|>
|< CASE_SEARCH
. SET ITEM FONT CASE_SEARCH,0,0,0, 1,""
. SET ITEM FONT CASE_SEARCH,0,0,0, 1,""
|>
|< CASE_LIST
. SET ITEM FONT CASE_LIST,0,0,0, 1,""
. SET ITEM FONT CASE_LIST,0,0,0, 1,""
|>
|< CASE_NEW
. SET ITEM FONT CASE_NEW,0,0,0, 1,""
. SET ITEM FONT CASE_NEW,0,0,0, 1,""
|>
|< CASE_SEARCHLABEL
. SET ITEM FONT CASE_SEARCHLABEL,1,0,0, 1,"/#FFD683"
. SET ITEM FONT CASE_SEARCHLABEL,1,0,0, 1,"/#FFD683"
. SET ITEM FONT CASE_SEARCHLABEL,1,0,0, 1,"/#FFD683"
. SET ITEM FONT CASE_SEARCHLABEL,1,0,0, 1,"/#FFD683"
. SET ITEM FONT CASE_SEARCHLABEL,1,0,0, 1,"/#FFD683"
|>
|< CASE_LISTLABEL
. SET ITEM FONT CASE_LISTLABEL,1,0,0, 1,"/#FFD683"
. SET ITEM FONT CASE_LISTLABEL,1,0,0, 1,"/#FFD683"
|>
|< CASE_NEWLABEL
. SET ITEM FONT CASE_NEWLABEL,1,0,0, 1,"/#FFFF99"
. SET ITEM FONT CASE_NEWLABEL,1,0,0, 1,"/#FFFF99"
. SET ITEM FONT CASE_NEWLABEL,1,0,0, 1,"/#FFFF99"
. SET ITEM FONT CASE_NEWLABEL,1,0,0, 1,"/#FFFF99"
. SET ITEM FONT CASE_NEWLABEL,1,0,0, 1,"/#FFFF99"
|>
|< GUI_VERSION
. SET ITEM FONT GUI_VERSION,0,0,0, 0,"#FFFFFF"
|>
|< DBA_PAGE
. SET ITEM FONT DBA_PAGE,1,0,0, 1,""
|>
|< CASE_NEWB
. SET ITEM FONT CASE_NEWB,1,0,0, 1,""
. SET ITEM FONT CASE_NEWB,1,0,0, 1,""
|>
|< FORM_LIST
. SET ITEM FONT FORM_LIST,1,0,0, 1,""
|>
|< OPTIONS
. SET ITEM FONT OPTIONS,1,0,0, 1,""
. SET ITEM FONT OPTIONS,1,0,0, 1,""
. SET ITEM FONT OPTIONS,1,0,0, 1,""
|>
|< PAGE_TABLE
. SET ITEM FONT PAGE_TABLE,1,0,0, 1,""
. SET ITEM FONT PAGE_TABLE,1,0,0, 1,""
|>
|< PAGE_CASEIDS
. SET ITEM FONT PAGE_CASEIDS,1,0,0, 1,""
. SET ITEM FONT PAGE_CASEIDS,1,0,0, 1,""
. SET ITEM FONT PAGE_CASEIDS,1,0,0, 1,""
|>
|< PAGE_OLD_KEYS
. SET ITEM FONT PAGE_OLD_KEYS,1,0,0, 1,""
. SET ITEM FONT PAGE_OLD_KEYS,1,0,0, 1,""
. SET ITEM FONT PAGE_OLD_KEYS,1,0,0, 1,""
|>
|< PAGE_NEW_KEYS
. SET ITEM FONT PAGE_NEW_KEYS,1,0,0, 1,""
. SET ITEM FONT PAGE_NEW_KEYS,1,0,0, 1,""
|>
|< PAGE_DBA
. SET ITEM FONT PAGE_DBA,1,0,0, 1,""
. SET ITEM FONT PAGE_DBA,1,0,0, 1,""
. SET ITEM FONT PAGE_DBA,1,0,0, 1,""
|>
|< LOG_OUT
. SET ITEM FONT LOG_OUT,1,0,0, 1,""
. SET ITEM FONT LOG_OUT,1,0,0, 1,""
. SET ITEM FONT LOG_OUT,1,0,0, 1,""
|>
|< OLD_KEY_LABEL_1
. SET ITEM FONT OLD_KEY_LABEL_1,1,0,0, 1,""
|>
|< OLD_KEY_LABEL_2
. SET ITEM FONT OLD_KEY_LABEL_2,1,0,0, 1,""
|>
|< OLD_KEY_LABEL_3
. SET ITEM FONT OLD_KEY_LABEL_3,1,0,0, 1,""
|>
|< OLD_KEY_LABEL_4
. SET ITEM FONT OLD_KEY_LABEL_4,1,0,0, 1,""
|>
|< NEW_KEY_LABEL_1
. SET ITEM FONT NEW_KEY_LABEL_1,1,0,0, 1,"#000000"
|>
|< NEW_KEY_LABEL_2
. SET ITEM FONT NEW_KEY_LABEL_2,1,0,0, 1,"#000000"
|>
|< NEW_KEY_LABEL_3
. SET ITEM FONT NEW_KEY_LABEL_3,1,0,0, 1,"#000000"
|>
|< NEW_KEY_LABEL_4
. SET ITEM FONT NEW_KEY_LABEL_4,1,0,0, 1,"#000000"
|>
|< USER_NAME
. SET ITEM FONT USER_NAME,1,0,0, 1,"#0000C0"
. SET ITEM FONT USER_NAME,1,0,0, 1,"#0000C0"
. SET ITEM FONT USER_NAME,1,0,0, 1,"#0000C0"
|>
|< DEFAULT_BUTTON
. SET ITEM FONT DEFAULT_BUTTON,0,0,0, 1,""
. SET ITEM FONT DEFAULT_BUTTON,0,0,0, 1,""
|>
|< CASE_SEARCHB
. SET ITEM FONT CASE_SEARCHB,1,0,0, 1,""
. SET ITEM FONT CASE_SEARCHB,1,0,0, 1,""
|>
|< NEW_REC_HELP
. SET ITEM FONT NEW_REC_HELP,1,1,0, 1,"/#FFFF99"
. SET ITEM FONT NEW_REC_HELP,1,1,0, 1,"/#FFFF99"
. SET ITEM FONT NEW_REC_HELP,1,1,0, 1,"/#FFFF99"
. SET ITEM FONT NEW_REC_HELP,1,1,0, 1,"/#FFFF99"
|>
|< NEW_REC_BUTTON
. SET ITEM FONT NEW_REC_BUTTON,1,0,0, 1,""
. SET ITEM FONT NEW_REC_BUTTON,1,0,0, 1,""
|>
|< NEW_REC_CANCEL
. SET ITEM FONT NEW_REC_CANCEL,1,0,0, 1,""
. SET ITEM FONT NEW_REC_CANCEL,1,0,0, 1,""
|>
|< PAGE_CASE_DELETE
. SET ITEM FONT PAGE_CASE_DELETE,1,0,0, 1,""
. SET ITEM FONT PAGE_CASE_DELETE,1,0,0, 1,""
|>
|< REC_TABLE_DATA
. SET ITEM FONT REC_TABLE_DATA,0,0,0, 0,"times new roman"
|>
|< TABLE_KEY_LABEL_1
. SET ITEM FONT TABLE_KEY_LABEL_1,1,0,0, 0,""
|>
|< TABLE_KEY_LABEL_2
. SET ITEM FONT TABLE_KEY_LABEL_2,1,0,0, 0,""
|>
|< TABLE_KEY_LABEL_3
. SET ITEM FONT TABLE_KEY_LABEL_3,1,0,0, 0,""
|>
|< TABLE_KEY_LABEL_4
. SET ITEM FONT TABLE_KEY_LABEL_4,1,0,0, 0,""
|>
|< DELETE_CASE_LABEL
. SET ITEM FONT DELETE_CASE_LABEL,1,0,0, 1,"#FF0000"
. SET ITEM FONT DELETE_CASE_LABEL,1,0,0, 1,"#FF0000"
. SET ITEM FONT DELETE_CASE_LABEL,1,0,0, 1,"#FF0000"
. SET ITEM FONT DELETE_CASE_LABEL,1,0,0, 1,"#FF0000"
|>
|< CASE_DELETE_BUTTON
. SET ITEM FONT CASE_DELETE_BUTTON,1,0,0, 1,""
|>
|< CASE_DELETE_WARNING
. SET ITEM FONT CASE_DELETE_WARNING,1,0,0, 1,"#000000"
. SET ITEM FONT CASE_DELETE_WARNING,1,0,0, 1,"#000000"
. SET ITEM FONT CASE_DELETE_WARNING,1,0,0, 1,"#000000"
|>
|< CASE_REC_WARNING
. SET ITEM FONT CASE_REC_WARNING,1,0,1, 1,"#FF0000"
|>
|< TABLE_VIEW_SPREADSHEET
. SET ITEM FONT TABLE_VIEW_SPREADSHEET,1,0,0, 1,""
. SET ITEM FONT TABLE_VIEW_SPREADSHEET,1,0,0, 1,""
|>
|< ID_00019
. SET ITEM FONT ID_00019,1,0,0, 1,""
. SET ITEM FONT ID_00019,1,0,0, 1,""
|>
|< DELETE_CASE_BACK
. SET ITEM FONT DELETE_CASE_BACK,1,0,0, 1,""
. SET ITEM FONT DELETE_CASE_BACK,1,0,0, 1,""
|>
|< TABLE_VIEW_HELP
. SET ITEM FONT TABLE_VIEW_HELP,1,0,0, 1,""
|>
|< LOCK_STATUS_LABEL
. SET ITEM FONT LOCK_STATUS_LABEL,1,0,0, 1,"#EE0000"
. SET ITEM FONT LOCK_STATUS_LABEL,1,0,0, 1,"#EE0000"
|>
|< VIEW_FORM
. SET ITEM FONT VIEW_FORM,1,0,0, 1,""
. SET ITEM FONT VIEW_FORM,1,0,0, 1,""
|>
|< BACK_TO_ADMIN
. SET ITEM FONT BACK_TO_ADMIN,1,0,0, 1,""
. SET ITEM FONT BACK_TO_ADMIN,1,0,0, 1,""
|>
|< DEBUG_LABEL
. SET ITEM FONT DEBUG_LABEL,1,0,0, 0,""
|>
|< DEBUG_ON_OFF
. SET ITEM FONT DEBUG_ON_OFF,1,0,0, 0,""
|>
|< MEGA_CASE_LABEL
. SET ITEM FONT MEGA_CASE_LABEL,1,0,0, 1,""
. SET ITEM FONT MEGA_CASE_LABEL,1,0,0, 1,""
. SET ITEM FONT MEGA_CASE_LABEL,1,0,0, 1,""
. SET ITEM FONT MEGA_CASE_LABEL,1,0,0, 1,""
. SET ITEM FONT MEGA_CASE_LABEL,1,0,0, 1,""
|>
|< ID_00033
. SET ITEM FONT ID_00033,1,0,0, 1,""
. SET ITEM FONT ID_00033,1,0,0, 1,""
. SET ITEM FONT ID_00033,1,0,0, 1,""
|>
|< SCREEN_COMPILE
. SET ITEM FONT SCREEN_COMPILE,1,0,0, 0,""
|>
|< GET_MASTER_INFO
. SET ITEM FONT GET_MASTER_INFO,1,0,0, 0,""
|>
|< GUI_OPTION
. SET ITEM FONT GUI_OPTION,1,0,0, 0,""
|>
|< YELLOW_BOX
. SET ITEM FONT YELLOW_BOX,0,0,0, 0,"#0000FF/#FFC000"
|>
|< COMPILE_LABEL
. SET ITEM FONT COMPILE_LABEL,1,0,0, 0,""
|>
|< ALLCALL_SYS
. SET ITEM FONT ALLCALL_SYS,1,0,0, 0,""
|>
|< DB_INFO_LABEL
. SET ITEM FONT DB_INFO_LABEL,1,0,0, 0,""
|>
|< VIEW_CODEBOOK_LABEL
. SET ITEM FONT VIEW_CODEBOOK_LABEL,1,0,0, 0,""
|>
|< SCHEMA_LABEL
. SET ITEM FONT SCHEMA_LABEL,1,0,0, 0,""
|>
|< ID_00049
. SET ITEM FONT ID_00049,1,0,0, 0,""
|>
|< DCC_VARS_LABEL
. SET ITEM FONT DCC_VARS_LABEL,1,0,0, 0,""
|>
|< CASE_MOVER
. SET ITEM FONT CASE_MOVER,1,0,0, 0,""
|>
|< USE_GUI_RC
. SET ITEM FONT USE_GUI_RC,1,0,0, 0,""
|>
|< USE_GUI_PG
. SET ITEM FONT USE_GUI_PG,1,0,0, 0,""
|>
|< DB_LOCKER
. SET ITEM FONT DB_LOCKER,1,0,0, 0,""
|>
|< DB_UNLOCKER
. SET ITEM FONT DB_UNLOCKER,1,0,0, 0,""
|>
|< DB_LOCK_LABEL
. SET ITEM FONT DB_LOCK_LABEL,1,0,0, 0,""
|>
|< COMMENT_SHOW
. SET ITEM FONT COMMENT_SHOW,1,0,0, 0,""
|>
|< CHANGE_USER_LABEL
. SET ITEM FONT CHANGE_USER_LABEL,1,0,0, 0,""
|>
|< ID_00051
. SET ITEM FONT ID_00051,0,0,0, 0,"#FFFFFF/#000000"
|>
|< TURN_DEBBUGER_ON
. SET ITEM FONT TURN_DEBBUGER_ON,1,0,0, 0,""
|>
|< POP_UP_DEBUG_INFO
. SET ITEM FONT POP_UP_DEBUG_INFO,1,0,0, 0,""
|>
|< PAGE_BULK_RECORD
. SET ITEM FONT PAGE_BULK_RECORD,1,0,0, 0,""
|>
|< ID_00053
. SET ITEM FONT ID_00053,1,0,0, 1,""
|>
|< ID_00054
. SET ITEM FONT ID_00054,1,0,0, 1,""
. SET ITEM FONT ID_00054,1,0,0, 1,""
. SET ITEM FONT ID_00054,1,0,0, 1,""
|>
|< MAKE_SCREENS
. SET ITEM FONT MAKE_SCREENS,1,0,0, 0,""
|>
|< ID_00055
. SET ITEM FONT ID_00055,1,0,0, 0,""
|>
|< ID_00057
. SET ITEM FONT ID_00057,1,0,0, 0,""
|>
|< MAKE_CODEBOOK
. SET ITEM FONT MAKE_CODEBOOK,1,0,0, 0,""
|>
|< MAKE_CUSTOM_REC_LIST
. SET ITEM FONT MAKE_CUSTOM_REC_LIST,1,0,0, 0,""
|>

|}
execute subprocedure page
|{ Init
<comment> write "initialize DCC vars"
. string  *    600   GEN_STR1              | Generic/General String
. integer *      1   CASE_TYPE             | What variable type is the case id
. string  *     36   CASE_NAME             | Variable name of case, varname(0, 1)
. string  *     72   CASE_LABEL            | Variable label of case, vavarname(0, 1)
. string  *     36   CASE_TEMP_VALUE        | Case Test Value
. string  *     36   CASE_VALUE            | Case Value
. integer *      1   CASE_FOUND            | Does the case exists.
. string  *     36   BUFFER_NAME           | Buffer Name
. string  *    300   BUFFER_LINE           | Text to add to buffer
. integer *      4   BUFF#                | Current line number to write in buffer
. integer *      1   YES NO
. integer *      1   MEM_O MEM_T          | No need to remember compile or text value.
. integer *      4   CYCLE_NUM             | Cycle through some numbers
| Auto Log Out
. integer *      1   TIME_LEFT             | Minutes until Auto Log Out
. time               COUNT_DOWN ('HH:MM:SS')
. integer *      1   PROCEED              | Control Flow Varialbe.  Yes/No
. integer *      2   RESVAR               | Response Variable
. integer *      2   POS
. integer *      2   REPOS                | REPOSitition the list to what was selected before.
. integer *      4   DUMMY                | Dummy Variable
. integer *      2   REC_TYPE_NUM           | RECORD NUMBER
. integer *      2   REC_ROW_COUNT_INITIAL   | How many rows of records are there INITIALLY
. integer *      2   REC_ROW_COUNT          | How many rows of records are there
. integer *      2   FORM_COUNT              | Space out the forms
. integer *      2   KEY_COUNT             | key count
. string  *     36   KEY_NAME_1   KEY_NAME_2   KEY_NAME_3   KEY_NAME_4
. string  *     36   KEY_VALUE_1  KEY_VALUE_2  KEY_VALUE_3  KEY_VALUE_4 KEY_VALUE_5  KEY_VALUE_6  KEY_VALUE_7
. integer *      1   KEY_TYPE_1   KEY_TYPE_2   KEY_TYPE_3   KEY_TYPE_4  KEY_TYPE_5   KEY_TYPE_6  KEY_TYPE_7
. string  *     72   KEY_LABEL_1  KEY_LABEL_2  KEY_LABEL_3  KEY_LABEL_4
. string  *     36   KEY$N     KEY$V      | generic key name; key value (can be key1, key2, key3, or key4.    Added a couple of spaces for manipulations like adding double qoutes
. integer *      1   KEY$T                | generic key type
. string  *    100   VTYPE_MAP             | generic Variable Type Map
. real    *      8   KEY_MIN KEY_MAX        | generic Key Min and Max Values
. integer *      4   KEY_LABEL_COUNT        | generic How many labels are associated with the variable
. integer *      4   VALID_COUNT           | generic How many valid values are there
. integer *      1   VAL_VAR               | validation variable
. string  *     80   REC_VIA               | Passing Keys with VIA to subprocedures.
. date               DATE#V ('MMiDDiYYYY')| Right format for a Date Key
. time               TIME#V ('HHiMMiSS')  | Right format for a Time Key
. integer *      2   KEY_FOCUS
. integer *      1   VIEW_SPLASH VIEW_HOME VIEW_OLD_KEYS VIEW_NEW_KEYS VIEW_TABLE VIEW_DBA VIEW_HIDDEN |  Which Page View, easily rearrange pages
. string  *     36   SCREEN_RECTYPE_CHECK  | Is a record type correctly linked to a screen name?
. string  *     36   SCREEN_NAME           | Start of Screen Name
. string  *    300   SCREEN_MEMBER         | Fully qualified Name for PQL Painter Screen
. string  *    300   DVP_MEMBER            | Fully qualified Name for DVPainter Screen
. integer *      1   EXIT__#              | How did they exit the screen?
. integer *      4   DEBUG_LINE
. integer *      2   FORM_LIST_LAST_LINE     | Last line that the user clicked.  Reloading the keys is a problem for the user.  Do NOT reload if user is clicking on same form again.
| contains are customizable variables and variable necessary for customizing a user experience.
| Look and feel
. integer *      1   BOLD NOT_BOLD
                     ITALIC NOT_ITALIC
                     UNDERL NOT_UNDERL      | Fonts specifications
. integer *      1   SMALL LARGE XLARGE   | Fonts Size specifications
. string  *     20   NP_FONT               | Font type for lists
. string  *     20   P_FONT               | Font type for lables
| Record Information and Navigation
. integer *      2   array REC_INFO_NUM     (1000)  | Rec Number
. string  *     32   array REC_INFO_NAME    (1000)  | Rec Name
. string  *     32   array REC_INFO_FORM    (1000)  | Rec Name
. string  *    200   array REC_INFO_DISPLAY (1000)  | Rec Display
| Permissions
. integer *      1   I_GUI_REC_NEW   I_GUI_REC_READ  I_GUI_REC_WRITE    I_GUI_REC_DELETE I_GUI_REC_LOCK I_GUI_REC_TABLE
                     I_GUI_CASE_LIST I_GUI_CASE_NEW  I_GUI_CASE_DELETE  I_GUI_CASE_LOCK
                     I_GUI_SPECIAL  I_GUI_REPORTS  I_GUI_DBA   | customizable variables for the gui.
| management
. INTEGER *      1   DB_LOCK_STATUS
. string  *    300   HIPPA_TEXT_1 HIPPA_TEXT_2
. string  *    300   SPLASH_TEXT_1 SPLASH_TEXT_2 SPLASH_HEADER_TEXT
. STRING  *     32   DB_PROC_FILE                     | short cut to String to DBPROC FILE
. STRING  *    100   DB_PROC_MEMBER                   | stores member name to check, execute, etc.
. string  *    300   DB_SR1_FILE                      | string path to current database sr1  file
. string  *    300   DB_FOLDER                        | string path to current database folder
. string  *    300   PATH_FILE                    | File: Path
. string  *    100   NAME_FILE                    | File: Name
. string  *      6   EXT_FILE                     | File: Ext
. integer *      4   EASY_DEBUG_AUTONUM              | For debugging the timing of something.  Auto-increases by one.  Stick execute EASY_DEBUG in multiple locations and it will add it up for you.
. string  *    100   EASY_DEBUG_TEXT              | SPECIFIC TEXT FOR DEBUGGER
. integer *      4   TASK_WARNING                 | holds task warning value.  One use: compare task warning before and after calling data entry screen.  If data entry screen needs compiling or has an error, the task warning value will increase.
. string  *      7   HTML_COLOR   | for assigning colors to areas.  calculated.
. string  *      7   HTML_BLUE1   TO HTML_BLUE6
                     HTML_GREEN1  TO HTML_GREEN6
                     HTML_ORANGE1 TO HTML_ORANGE6
                     HTML_YELLOW1 TO HTML_YELLOW6
                     HTML_RED1    TO HTML_RED6
                     HTML_BLACK1  TO HTML_BLACK6
                     HTML_GREY        HTML_WHITE     |Standardized colors 1=LIGHT 6=DARK
                     HTML_COLUMBIA_BLUE
. integer *      4   RECURSIVE_COUNT   | Use to limit recursive calls.
. integer *      4   BUFFER_COUNT      | How many buffers are there
set HTML_BLUE6  ( '#13275a' )	
    HTML_BLUE5  ( '#1a3579' )	
    HTML_BLUE4  ( '#264fb6' )	
    HTML_BLUE3  ( '#336af3' )	
    HTML_BLUE2  ( '#9ab5f9' )	
    HTML_BLUE1  ( '#ccdafb' )
    HTML_ORANGE6 ( '#5a4513' )
    HTML_ORANGE5 ( '#795d1a' )
    HTML_ORANGE4 ( '#b58c26' )	
    HTML_ORANGE3 ( '#f2bb33' )	
    HTML_ORANGE2 ( '#f9dd9a' )	
    HTML_ORANGE1 ( '#fbedcc' )
    HTML_RED6 ('#5f0000' )	
    HTML_RED5 ('#7f0000' )	
    HTML_RED4 ('#bf0000' )	
    HTML_RED3 ('#ff0000' )	
    HTML_RED2 ('#ff8080' )	
    HTML_RED1 ('#febfbf' )
    HTML_GREEN6 ('#1e440e')	
    HTML_GREEN5 ('#285b13')	
    HTML_GREEN4 ('#3b881c')	
    HTML_GREEN3 ('#4fb626')	
    HTML_GREEN2 ('#a8db93')	
    HTML_GREEN1 ('#d3ecc9')
    HTML_YELLOW6 ('#5f5f1c')
    HTML_YELLOW5 ('#7f7f26')
    HTML_YELLOW4 ('#bfbf39')	
    HTML_YELLOW3 ('#ffff4c')	
    HTML_YELLOW2 ('#ffffa6')	
    HTML_YELLOW1 ('#fefed2')
    HTML_BLACK6 ('#303030')	
    HTML_BLACK5 ('#404040')	
    HTML_BLACK4 ('#606060')	
    HTML_BLACK3 ('#808080')	
    HTML_BLACK2 ('#c8c8c8')	
    HTML_BLACK1 ('#efefef')
    HTML_GREY    ( '#EEEEEE' )
    HTML_WHITE   ( '#FFFFFF' )
    HTML_COLUMBIA_BLUE ('#2060A4')
. DB_PROC_FILE = 'SIR'+ PFORMAT(SYSTEM(39),'zz') +'4'
. DB_SR1_FILE = dsn('SIR'+ PFORMAT(SYSTEM(39),'zz') +'1')
. execute subroutine SYSPROC.TOOLS.FILENAME (dsn( 'GUIPROCF' )) returning ( PATH_FILE, NAME_FILE, EXT_FILE )
. ifthen (fileis(PATH_FILE + 'images\columbia_university_logo.bmp') eq 1)
.   set image CU_IMGAGE PATH_FILE + 'images\columbia_university_logo.bmp'  | se the image if it can be found.  Otherwise show a empty spot.
. endif
. set HIPPA_TEXT_1  ('The information contained in this database is confidential. All database use is logged and monitored.')
. set HIPPA_TEXT_2  ('Unauthorized or improper use of this system, or the information it contains, is prohibited.')
. SPLASH_HEADER_TEXT = 'Data Coordinating Center'
. GEN_STR1 = '<body bgcolor="' + HTML_COLUMBIA_BLUE + '" readonly="true">'
           + '<font color="' + HTML_WHITE + '" size="+5" face="times"><p align="center" > <br>'
           + SPLASH_HEADER_TEXT  + '</font></p>'
. append line SPLASH_HEADER, GEN_STR1 html
. SPLASH_TEXT_1 = 'Welcome'
. ifthen ( (exists(recdoc(0,0)) eq 1) and (len(trim(recdoc(0,0))) gt 0) )
.   SPLASH_TEXT_1 = SPLASH_TEXT_1  + ' to the ' + trim(recdoc(0,0))
. elseif (system(40) gt 0)
.   SPLASH_TEXT_1 = SPLASH_TEXT_1  + ' to ' + dbname(0)
. else
.   SPLASH_TEXT_1 = SPLASH_TEXT_1 + ' to the D.C.C.'
. endif
. set SPLASH_TEXT_2 ('<p> - The information contained in this database is confidential.</p><p> - All database use is logged and monitored.</p><p> - Unauthorized or improper use of this system, or the information it contains, is prohibited.</p>')
. DEBUG_LINE = 1
. value labels KEY$T (1) 'String' (2) 'Categorical' (3) 'Date' (4) 'Time' (5) 'Number' (6) 'Number' (7) 'Number' (8) 'Scaled Var.  See Codebook.'
. value label VAL_VAR (0) 'valid' (1) 'not valid' (2) 'out of range' (3) 'blank or missing' (4) 'missing (code:1)' (5) 'missing (code:2)' (6) 'missing  (code:3)' (7) 'too long'
. value label DB_LOCK_STATUS (-1) 'Unknown. No access to file' (0) 'Unlocked' (1) 'Locked'
. enable timer 600
<comment> write "static DCC vars"
. set NO (0)    YES (1)
. set MEM_T (1) MEM_O (4)
. set VIEW_SPLASH (1) VIEW_HOME (2) VIEW_OLD_KEYS(3) VIEW_NEW_KEYS(4) VIEW_TABLE (5)
. set VIEWCASE_DELETE (6)  VIEW_DBA (7) VIEW_BULK_RECORD_DELETE (8) VIEW_HIDDEN (9)
. CASE_NAME  = trimr(varname(0, 1))
. CASE_TYPE  = vtype(0, CASE_NAME)
. CASE_LABEL = trim(varlabsc(0, CASE_NAME))
. SET ITEM MEGA_CASE_LABEL, CASE_LABEL
<comment> write "Calculate dynamic DCC vars"
. set TIME_LEFT (15)
. COUNT_DOWN = now(0)
<comment> write "Look and Feel"
. set NOT_BOLD NOT_ITALIC NOT_UNDERL (0)
. set BOLD ITALIC UNDERL SMALL (1)
. set SMALL (1) LARGE (3) XLARGE (5)
. set NP_FONT ('lucida console')
. set P_FONT ('arial')
. set item CASE_LISTLABEL, '  ' + CASE_LABEL
. set item DBA_NAME, 'Designed by Greg Neils'
. GEN_STR1 = '<body bgcolor="' + HTML_YELLOW1 + '" readonly="true">'
           + '<font color="' + HTML_BLACK6 + '" size="+5" face="Arial"><p align="center" > <br>'
           + SPLASH_TEXT_1  + '</font></p>'
. append line SPLASH_TEXT, GEN_STR1 html
. GEN_STR1 = '<p align="left"><font color=""' + HTML_BLACK6 + '" size="+1">' +  SPLASH_TEXT_2 + '</font></p>'
. append line SPLASH_TEXT, GEN_STR1 html
. EXECUTE SUBPROCEDURE DB_TITLE
. ifthen (exists(sglobal('USERA')) eq 1)
.   set item USER_NAME, sglobal('USERA')
.   set item USER_NAME_EVERY_PAGE, 'Signed in as: ' + sglobal('USERA')
. else
.   set item USER_NAME, GETENV('USER_NAME')
.   set item USER_NAME_EVERY_PAGE, 'User name is: ' + getenv('USER_NAME')
. endif
C CUSTOMIZATION IN DB PROCFILE.
. cif eq 1, 0<GUI_CUSTOM_PERMISSIONS>
<COMMENT> WRITE 'CALLING GUI_CUSTOM.PERMISSIONS'
.   CALL <DB_PROC_FILE>.GUI_CUSTOM.PERMISSIONS
. CIF END
|
. cif eq 1, 0<GUI_CUSTOM_GUI_SETTINGS>
<COMMENT> WRITE 'CALLING GUI_CUSTOM.GUI_SETTINGS'
.   CALL <DB_PROC_FILE>.GUI_CUSTOM.GUI_SETTINGS
. CIF END
C END DB PROCFILE CUSTOMIZATIONS
. execute subprocedure PERMISSIONS_DEFAULT | ANYTHING NOT ALREADY SET WILL BE SET TO 0 FOR USERS AND 1 FOR DBA
. execute subprocedure DB_LOCK_STATUS
. execute subprocedure DB_FOOTER
. execute subprocedure MAKE_SCREEN_LIST
. for CYCLE_NUM= 1,10
.   append item CHANGE_USER_SECLEV, FORMAT(CYCLE_NUM)
. end for
. set item CHANGE_USER, '<USERA>'
C if no cases in database option to create first case.
. call GUIPROCF.GUI_MAIN.CASE_FIRST
. ifthen (system(40) gt 0)    | database attached
|   case information
.   DB_PROC_MEMBER = DB_PROC_FILE +'.GUI_CUSTOM.CASE_LIST_LOAD:O'
.   ifthen (meminfo(DB_PROC_MEMBER, 1) = MEM_O)
<COMMENT> WRITE 'CALLING ' DB_PROC_MEMBER
.     ifthen (meminfo(DB_PROC_MEMBER , 1) ge 0)
.       execute subroutine [DB_PROC_MEMBER] (CASE_LIST) RETURNING (PROCEED) DYNAMIC
.     else
.       display infobox 'Please e-mail or call your DBA.  CASE_LIST_LOAD needs to be recompiled'
.     endif
.   else
.     execute subprocedure CASE_LIST_LOAD
.   endif
.   select item CASE_LIST, 0
.   remove all CASE_BREAD_CRUMB
|   form information
.   DB_PROC_MEMBER = DB_PROC_FILE +'.GUI_CUSTOM.REC_LIST_LOAD:O'
.   ifthen (meminfo(DB_PROC_MEMBER, 1) = MEM_O)
<COMMENT> WRITE 'CALLING ' DB_PROC_MEMBER
.     ifthen (meminfo(DB_PROC_MEMBER , 1) ge 0)
.       execute subroutine [DB_PROC_MEMBER ] (FORM_LIST REC_FORM_SELECTED REC_TYPE_SELECTED ) RETURNING (PROCEED) DYNAMIC
.     else
.       display infobox 'Please e-mail or call your DBA.  REC_LIST_LOAD needs to be recompiled'
.     endif
.   else
.     execute subprocedure REC_LIST_LOAD
.   endif
.   clear all FORM_LIST
. endif
<COMMENT> write ' if search for case returns zero results, should not be able to click on forms or new keys.  must figure this out'
. ifthen (sglobal('DEBUG_MODE') EQ '1')
.   BUFFER_NAME = 'DEBUG_INFO'
.   execute subprocedure BUFFER_START
.   BUFFER_LINE = 'Date:' + datec(today(0), 'mm/dd/yy') + '  Time:' + timec(now(0),'hh:mm') ; execute subprocedure BUFFER_WRITE
.   BUFFER_LINE = 'Database:' + dbname(0) ; execute subprocedure BUFFER_WRITE
.   BUFFER_LINE = 'User: ' + sglobal('USERA') ; execute subprocedure BUFFER_WRITE
.   BUFFER_LINE = 'SecLevel: ' + sglobal('GSECLEV') ; execute subprocedure BUFFER_WRITE
.   BUFFER_LINE = 'Copy everything and paste it in an e-mail to Greg Neils' ; execute subprocedure BUFFER_WRITE
. else
.   hide item DEBUG_CODE
. endif
. focus item I_AGREE
. ifthen (meminfo(DB_PROC_FILE+'.GUI_CUSTOM.SPLASH_TEXT:O',1) = MEM_O)
<COMMENT> WRITE 'CALLING ' DB_PROC_FILE '.GUI_CUSTOM.SPLASH_TEXT:O'
.   execute subroutine [DB_PROC_FILE+'.GUI_CUSTOM.SPLASH_TEXT'] (SPLASH_TEXT) RETURNING (PROCEED) DYNAMIC
. endif
|}
end initial

message ALL m_id, m_arg1, m_arg2

|{ Message
. TIME_LEFT = 15
. if (sglobal('DEBUG_MODE') EQ '1') execute subprocedure DEBUG_INFO;  DEBUG_LINE = DEBUG_LINE +1
C SYSTEM_ERR_CHECK SHOULD GO HERE  | MOVE TO TIMER TO NOT GET TO MANY MESSAGES
<comment> write '-------------------- Message  --------------------' //
|}

ifthen (m_id eq I_AGREE )
|< I_AGREE
| This must be the last thing drawn so it recieves focus
. ifthen (dbtype(0) eq 1)
.   m_page = VIEW_HOME
. else
.   m_page = VIEW_OLD_KEYS
. endif
. execute subprocedure PAGE
. execute subprocedure ITEM_VISIBLE
. execute subprocedure ITEM_ENABLE
. FOCUS ITEM CASE_SEARCH

|>
next message
endif

ifthen (m_id eq I_DISAGREE )
|< I_DISAGREE
Exit Message
|>
next message
endif

ifthen (m_id eq CASE_LIST )
|< CASE_LIST
. PROCEED = YES
. CASE_TEMP_VALUE = trimlr(upper(gettxt(CASE_LIST)))
. CASE_VALUE = trimlr(upper(gettxt(CASE_LIST)))
<comment> write '- Clicked CASE_LIST CASE_VALUE:' CASE_VALUE
<comment> write 'case display is not really refreshing with the correct case information'
. ifthen (M_ARG2 eq 1)
.   select item FORM_LIST,1
.   select item REC_TYPE_SELECTED,1
.   select item REC_FORM_SELECTED,1
.   execute subprocedure OLD_KEY_PAGE_DISPLAY_LIBRARY
.   execute subprocedure ITEM_VISIBLE
. endif
|>
next message
endif

ifthen (m_id eq CASE_NEWB )
|< CASE_NEWB
. select item FORM_LIST,1
. select item REC_TYPE_SELECTED,1
. select item REC_FORM_SELECTED,1
. execute subprocedure CASE_NEW_LIBRARY
|>
next message
endif

ifthen (m_id eq FORM_LIST )
|< FORM_LIST
. ifthen ( FORM_LIST_LAST_LINE = getpos(FORM_LIST) )
.   ifthen (M_ARG2 eq 1)  | DOUBLE CLICK
.     ifthen (REC_ROW_COUNT EQ 1)  | JUST ONE RECORD.  GET THE VALUES AND GO TO IT.
.       execute subprocedure ALL_KEY_GET_VALUE
.       execute subprocedure OLD_KEY_ALL_VALIDATE
.       if ( PROCEED = NO ) NEXT MESSAGE
.       execute subprocedure GOTO_SCREEN_LIBRARY  | double clicked - go to screen and do everything needed afterwards
.       next message
.     elseif (REC_ROW_COUNT GT 1)
.       GEN_STR1 = 'Choose from the the values listed on the right.'
                   + char(13) + char(13) + 'Then double click on the last item to go to the form.'
                   + char(13) + char(13) + 'Or click New Form Button.'
.       display infobox GEN_STR1
.       next message
.     elseif (REC_ROW_COUNT EQ 0)
.       display YNCBOX 'Create a new form?' RESPONSE RESVAR
.       if (RESVAR EQ 0 or -1 ); next message  | no or cancel (1=Yes)
.       ifthen (KEY_COUNT EQ 0)
.         execute subprocedure GOTO_SCREEN_LIBRARY  | double clicked - go to screen
.       else
.         m_page = VIEW_NEW_KEYS
.         execute subprocedure PAGE
.         execute subprocedure ITEM_VISIBLE
.         execute subprocedure NEW_KEY_VISIBLE
.         focus item NEW_KEY_VALUE_1
.       endif
.     endif
.   endif
. else
.   execute subprocedure FORM_LIST_LIBRARY
. endif

|>
next message
endif

ifthen (m_id eq OPTIONS )
|< OPTIONS
execute dbms "call GUIPROCF.MODULES.SCREEN_OPTIONS"
|>
next message
endif

ifthen (m_id eq PAGE_TABLE )
|< PAGE_TABLE
. if (m_page eq VIEW_TABLE) NEXT MESSAGE  | already on page
. if (getpos(CASE_LIST) eq 0) display infobox "Please select a " + CASE_LABEL; NEXT MESSAGE
. if (getpos(FORM_LIST) eq 0) display infobox "Please select a form"; NEXT MESSAGE

. m_page = VIEW_TABLE
. execute subprocedure PAGE
. execute subprocedure ITEM_VISIBLE
. execute subprocedure REC_TABLE_DISPLAY
|>
next message
endif

ifthen (m_id eq PAGE_CASEIDS )
|< PAGE_CASEIDS
. if (m_page = VIEW_HOME) NEXT MESSAGE  | alreadY on page
. m_page = VIEW_HOME
. execute subprocedure PAGE
. execute subprocedure ITEM_VISIBLE
. execute subprocedure ITEM_ENABLE
|>
next message
endif

ifthen (m_id eq PAGE_OLD_KEYS )
|< PAGE_OLD_KEYS
ifthen (m_page eq VIEW_OLD_KEYS)
. display infobox "You are on this page already."
else
. execute subprocedure OLD_KEY_PAGE_DISPLAY_LIBRARY
. execute subprocedure ITEM_VISIBLE
endif
|>
next message
endif

ifthen (m_id eq PAGE_NEW_KEYS )
|< PAGE_NEW_KEYS
. if (m_page eq VIEW_NEW_KEYS) NEXT MESSAGE  | already on page
. if (getpos(CASE_LIST) eq 0) display infobox "Please select a " + CASE_LABEL; NEXT MESSAGE
. ifthen (getpos(FORM_LIST) eq 0)
.   execute subprocedure OLD_KEY_PAGE_DISPLAY_LIBRARY
.   execute subprocedure ITEM_VISIBLE
.   display infobox "Please select a form." ; NEXT MESSAGE
. endif
. ifthen (KEY_COUNT eq 0)
.   execute subprocedure GOTO_SCREEN_LIBRARY  | double clicked - go to screen
.   next message | no need to change to new rec page
. endif
. m_page = VIEW_NEW_KEYS
. execute subprocedure PAGE
. execute subprocedure ITEM_VISIBLE
. execute subprocedure NEW_KEY_VISIBLE
. focus item NEW_KEY_VALUE_1
|>
next message
endif

ifthen (m_id eq PAGE_DBA )
|< PAGE_DBA
. if (m_page eq VIEW_DBA) NEXT MESSAGE  | alread on page
. m_page = VIEW_DBA
. execute subprocedure PAGE
. execute subprocedure ITEM_VISIBLE

|>
next message
endif

ifthen (m_id eq LOG_OUT )
|< LOG_OUT
Exit Message
|>
next message
endif

ifthen (m_id eq OLD_KEY_LIST_1 )
|< OLD_KEY_LIST_1
. PROCEED = 1
. KEY$N = KEY_NAME_1; KEY$T = KEY_TYPE_1; KEY$V = gettxt(OLD_KEY_LIST_1)
. execute subprocedure ANY_KEY_CLEAN
. execute subprocedure ANY_KEY_VALIDATE
. ifthen (PROCEED eq 0)
.   display infobox '  Value for "' + KEY_LABEL_1 + '". ' + char(13) + char(13) + KEY$V  + ' is not valid.'
.   next message
. endif
. REFRESH_START_KEYNUM = 2
. execute subprocedure OLD_KEY_CLICK_LIBRARY
. execute subprocedure OLD_KEY_REFRESH

|>
next message
endif

ifthen (m_id eq OLD_KEY_LIST_2 )
|< OLD_KEY_LIST_2
. PROCEED = 1
. KEY$N = KEY_NAME_2; KEY$T = KEY_TYPE_2; KEY$V = gettxt(OLD_KEY_LIST_2)
. execute subprocedure ANY_KEY_CLEAN
. execute subprocedure ANY_KEY_VALIDATE
. ifthen (PROCEED eq 0)
.   display infobox '  Value for "' + KEY_LABEL_2 + '". ' + char(13) + char(13) + KEY$V  + ' is not valid.'
.   next message
. endif
. REFRESH_START_KEYNUM = 3
. execute subprocedure OLD_KEY_CLICK_LIBRARY
. execute subprocedure OLD_KEY_REFRESH

|>
next message
endif

ifthen (m_id eq OLD_KEY_LIST_3 )
|< OLD_KEY_LIST_3
. PROCEED = 1
. KEY$N = KEY_NAME_3; KEY$T = KEY_TYPE_3; KEY$V = gettxt(OLD_KEY_LIST_3)
. execute subprocedure ANY_KEY_CLEAN
. execute subprocedure ANY_KEY_VALIDATE
. ifthen (PROCEED eq 0)
.   display infobox '  Value for "' + KEY_LABEL_3 + '". ' + char(13) + char(13) + KEY$V  + ' is not valid.'
.   next message
. endif
. REFRESH_START_KEYNUM = 4
. execute subprocedure OLD_KEY_CLICK_LIBRARY
. execute subprocedure OLD_KEY_REFRESH

|>
next message
endif

ifthen (m_id eq OLD_KEY_LIST_4 )
|< OLD_KEY_LIST_4
. PROCEED = 1
. KEY$N = KEY_NAME_4; KEY$T = KEY_TYPE_4; KEY$V = gettxt(OLD_KEY_LIST_4)
. execute subprocedure ANY_KEY_CLEAN
. execute subprocedure ANY_KEY_VALIDATE
. ifthen (PROCEED eq 0)
.   display infobox '  Value for "' + KEY_LABEL_4 + '". ' + char(13) + char(13) + KEY$V  + ' was not valid.'
.   next message
. endif
. execute subprocedure OLD_KEY_CLICK_LIBRARY

|>
next message
endif

ifthen (m_id eq NEW_KEY_CHOICE_1 )
|< NEW_KEY_CHOICE_1
. KEY$N = KEY_NAME_1
. KEY$V = trim(gettxt(NEW_KEY_CHOICE_1))
. KEY$T = KEY_TYPE_1
. execute subprocedure ANY_KEY_CLEAN
. set item NEW_KEY_VALUE_1, KEY$V
|>
next message
endif

ifthen (m_id eq NEW_KEY_CHOICE_2 )
|< NEW_KEY_CHOICE_2
. KEY$N = KEY_NAME_2
. KEY$V = trim(gettxt(NEW_KEY_CHOICE_2))
. KEY$T = KEY_TYPE_2
. execute subprocedure ANY_KEY_CLEAN
. set item NEW_KEY_VALUE_2, KEY$V
|>
next message
endif

ifthen (m_id eq NEW_KEY_CHOICE_3 )
|< NEW_KEY_CHOICE_3
. KEY$N = KEY_NAME_3
. KEY$V = trim(gettxt(NEW_KEY_CHOICE_3))
. KEY$T = KEY_TYPE_3
. execute subprocedure ANY_KEY_CLEAN
. set item NEW_KEY_VALUE_3, KEY$V
|>
next message
endif

ifthen (m_id eq NEW_KEY_CHOICE_4 )
|< NEW_KEY_CHOICE_4
. KEY$N = KEY_NAME_4
. KEY$V = trim(gettxt(NEW_KEY_CHOICE_4))
. KEY$T = KEY_TYPE_4
. execute subprocedure ANY_KEY_CLEAN
. set item NEW_KEY_VALUE_4, KEY$V
|>
next message
endif

ifthen (m_id eq DEFAULT_BUTTON )
|< DEFAULT_BUTTON
c <comment> write 'default button focus: ' [getfocus(0)] ' Value: ' [gettxt(getfocus(0))]
. ifthen (getfocus(0) eq CASE_SEARCH)
.   execute subprocedure OLD_CASE_SEARCH_LIBRARY
. elseif (getfocus(0) eq CASE_NEW)
.   execute subprocedure CASE_NEW_LIBRARY
. elseif (getfocus(0) eq DEBUG_CODE)
.   BUFFER_NAME = 'DEBUG_CODE'          ; execute subprocedure BUFFER_START
.   BUFFER_LINE = 'program'            ; execute subprocedure BUFFER_WRITE
.   BUFFER_LINE = gettxt(DEBUG_CODE)    ; execute subprocedure BUFFER_WRITE
.   BUFFER_LINE = 'end program'        ; execute subprocedure BUFFER_WRITE
.   execute dbms ['INCLUDE BUFFER ' + BUFFER_NAME]
. endif
| note the reverse order. If you go in key order, you'll cycle through the keys, get to the last one and then focus on the create button all the time
| IF USE PRESSES ENTER, MATCH THE CORRECT VALUE LABEL TO THE VALUE AND FOCUS ON NEXT KEY
| COULD BECOME A SUBPROCEDURE ONE DAY
. do repeat REPX = 4 3 2 1 /
            REPY = 4 4 3 2 /
.   ifthen (getfocus(0) eq NEW_KEY_VALUE_!REPX)
.     KEY$N = KEY_NAME_!REPX
.     KEY$T = KEY_TYPE_!REPX
.     KEY$V = trimlr(gettxt(NEW_KEY_VALUE_!REPX))
.     execute subprocedure ANY_KEY_VALIDATE
.     ifthen (PROCEED eq 0)
.       GEN_STR1 = gettxt(NEW_KEY_LABEL_!REPX)
                   + char(13) +  'Cannot be "' + KEY$V +'"'
                   + char(13) + '  Error: ' + vallab(VAL_VAR)
.       display infobox GEN_STR1
.       next message
.     endif
<comment> write 'this needs to be rethought.  When going back and selecting the new record keys, when should that happen?'
.     for FORN = 1, getnitems(NEW_KEY_CHOICE_!REPX)
.       GENSTR$1 = trimlr(getitxt(NEW_KEY_CHOICE_!REPX, FORN))
.       GENSTR$1 = trimlr(substr(GENSTR$1,1,len(GENSTR$1) - abs(srst(GENSTR$1,char(9))) ))  | trim before tab
.       GENSTR$1 = trimlr(SUBSTR(GENSTR$1,1,len(GENSTR$1) - abs(srst(GENSTR$1,' ')) ))      | trim before space
.       if (KEY$V = GENSTR$1 ) select item NEW_KEY_CHOICE_!REPX, FORN ; EXIT FOR
.     end for
.     ifthen (KEY_COUNT eq REPX ) focus item NEW_REC_BUTTON
.     else focus item NEW_KEY_VALUE_!REPY
.     endif
.   endif
. end repeat

|>
next message
endif

ifthen (m_id eq REC_TYPE_SELECTED )
|< REC_TYPE_SELECTED
. select item FORM_LIST, GETPOS(REC_TYPE_SELECTED)
. select item REC_FORM_SELECTED, GETPOS(REC_TYPE_SELECTED)
. execute subprocedure FORM_LIST_LIBRARY
|>
next message
endif

ifthen (m_id eq CASE_SEARCHB )
|< CASE_SEARCHB
select item FORM_LIST,1
select item REC_TYPE_SELECTED,1
select item REC_FORM_SELECTED,1
execute subprocedure OLD_CASE_SEARCH_LIBRARY
|>
next message
endif

ifthen (m_id eq NEW_REC_BUTTON )
|< NEW_REC_BUTTON
. execute subprocedure ALL_KEY_GET_VALUE
. do repeat REPX = 1 2 3 4/
.   KEY$N = KEY_NAME_!REPX
.   KEY$T = KEY_TYPE_!REPX
.   KEY$V = trimlr(gettxt(NEW_KEY_VALUE_!REPX))
.   if (KEY_COUNT ge REPX) execute subprocedure ANY_KEY_VALIDATE  | ONLY DO IF KEYS REALLY EXIST FOR RECORD TYPE.
.   ifthen (PROCEED eq 0)
.     GEN_STR1 = gettxt(NEW_KEY_LABEL_!REPX)
                   + char(13) +  'Cannot be "' + KEY$V +'"'
                   + char(13) + '  Error: ' + vallab(VAL_VAR)
.     display infobox GEN_STR1
.     focus item NEW_KEY_VALUE_!REPX
.     set item NEW_KEY_VALUE_!REPX, gettxt(NEW_KEY_VALUE_!REPX)
.     next message
.   endif
. end repeat
. if(PROCEED = 0) next message
. execute subprocedure GOTO_SCREEN_LIBRARY
| on return goto VIEW_OLD_KEYS
. execute subprocedure OLD_KEY_PAGE_DISPLAY_LIBRARY
. execute subprocedure ALL_KEY_RESELECT
|>
next message
endif

ifthen (m_id eq NEW_REC_CANCEL )
|< NEW_REC_CANCEL
. m_page = VIEW_OLD_KEYS
. execute subprocedure PAGE
. execute subprocedure ITEM_VISIBLE
. execute subprocedure OLD_KEY_VISIBLE
|>
next message
endif

ifthen (m_id eq PAGE_CASE_DELETE )
|< PAGE_CASE_DELETE
. if (m_page = VIEWCASE_DELETE) NEXT MESSAGE  | already on page
. m_page = VIEWCASE_DELETE
. execute subprocedure PAGE
. execute subprocedure ITEM_VISIBLE
. execute subprocedure CASE_ALL_DATA_DISPLAY
|>
next message
endif

ifthen (m_id eq CASE_DELETE_BUTTON )
|< CASE_DELETE_BUTTON
. display yncbox 'Delete ' + CASE_LABEL + ': ' + CASE_VALUE RESPONSE RESVAR
. if (RESVAR EQ 0 or -1 ); next message  | no or cancel (1=Yes)
. if ( gettxt(CASE_DELETE_REASON) EQ '') display infobox 'Please provide a reason.'; next message
. if ( len(PACK(gettxt(CASE_DELETE_REASON))) LE 5) display infobox 'A more detailed reason, please'; next message
. execute subprocedure CASE_DELETE
. execute subprocedure CASE_LIST_LOAD
. m_page = VIEW_HOME
. execute subprocedure PAGE
. execute subprocedure ITEM_VISIBLE
. execute subprocedure ITEM_ENABLE
. select item CASE_LIST, 0

|>
next message
endif

ifthen (m_id eq TABLE_VIEW_SPREADSHEET )
|< TABLE_VIEW_SPREADSHEET
. GEN_STR1 = "SIR SPREADSHEET RECTYPE=" + format(REC_TYPE_NUM)
             + " BOOLEAN = (" + CASE_NAME + " = "
. ifthen (CASE_TYPE = 1 and sbst(CASE_VALUE,1,1) <> "'")
.   GEN_STR1 = GEN_STR1 + '"' + trimlr(CASE_VALUE) + '"'
. else
.   GEN_STR1 = GEN_STR1 + CASE_VALUE
. endif
.   GEN_STR1 = GEN_STR1 + ') '
. GEN_STR1 = GEN_STR1 + " labels"
<comment> write 'TABLE_VIEW_SPREADSHEET: ' GEN_STR1
. execute dbms  GEN_STR1
|>
next message
endif

ifthen (m_id eq ID_00019 )
|< ID_00019
. m_page = VIEW_OLD_KEYS
. execute subprocedure PAGE
. execute subprocedure ITEM_VISIBLE
. execute subprocedure OLD_KEY_VISIBLE
|>
next message
endif

ifthen (m_id eq DELETE_CASE_BACK )
|< DELETE_CASE_BACK
. m_page = VIEW_OLD_KEYS
. execute subprocedure PAGE
. execute subprocedure ITEM_VISIBLE
. execute subprocedure OLD_KEY_VISIBLE
|>
next message
endif

ifthen (m_id eq VIEW_FORM )
|< VIEW_FORM
. ifthen (REC_ROW_COUNT EQ 0)
.   display YNCBOX 'Create a new form?' RESPONSE RESVAR
.   if (RESVAR EQ 0 or -1 ); next message  | no or cancel (1=Yes)
.   ifthen (KEY_COUNT ge 1) |intercept and go to new key screen
.     m_page = VIEW_NEW_KEYS
.     execute subprocedure PAGE
.     execute subprocedure ITEM_VISIBLE
.     execute subprocedure NEW_KEY_VISIBLE
.     focus item NEW_KEY_VALUE_1
.     next message
.   endif
. endif
. execute subprocedure ALL_KEY_GET_VALUE
. execute subprocedure OLD_KEY_ALL_VALIDATE
. if ( PROCEED = NO ) NEXT MESSAGE
. execute subprocedure GOTO_SCREEN_LIBRARY  | double clicked - go to screen and do everything needed afterwards

|>
next message
endif

ifthen (m_id eq PAGE_HIDDEN )
|< PAGE_HIDDEN
. m_page = VIEW_HIDDEN
. execute subprocedure PAGE
. execute subprocedure ITEM_VISIBLE
|>
next message
endif

ifthen (m_id eq BACK_TO_ADMIN )
|< BACK_TO_ADMIN
. if (m_page eq VIEW_DBA) NEXT MESSAGE  | alread on page
. m_page = VIEW_DBA
. execute subprocedure PAGE
. execute subprocedure ITEM_VISIBLE
|>
next message
endif

ifthen (m_id eq SCREEN_COMPILE )
|< SCREEN_COMPILE
if(0 eq len(DB_PROC_FILE) or exists(DB_PROC_FILE) ) display infobox 'No DB_PROC_FILE defined'; next message
execute dbms 'set procfile ' + DB_PROC_FILE
ifthen (meminfo(DB_PROC_FILE + ".SCREENS.ALLCALL", 1) = MEM_T)
. execute dbms ['call ' + DB_PROC_FILE + '.SCREENS.ALLCALL']
else
. execute dbms 'call GUIPROCF.SCREENS.MAKE_SCREENS_ALLCALL'
endif
|>
next message
endif

ifthen (m_id eq GET_MASTER_INFO )
|< GET_MASTER_INFO
execute subprocedure MASTER_INFO
|>
next message
endif

ifthen (m_id eq ALLCALL_SYS )
|< ALLCALL_SYS
if(0 eq len(DB_PROC_FILE) or exists(DB_PROC_FILE) ) display infobox 'No DB_PROC_FILE defined'; next message
execute dbms 'set procfile ' + DB_PROC_FILE
ifthen (meminfo(DB_PROC_FILE + ".SYSTEM.ALLCALL", 1) = MEM_T)
. execute dbms ['call ' + DB_PROC_FILE + '.SYSTEM.ALLCALL']
else
. display infobox "Could not find Screens.AllCall"
endif
|>
next message
endif

ifthen (m_id eq VIEW_CODEBOOK_LABEL )
|< VIEW_CODEBOOK_LABEL
execute subprocedure VIEW_CODEBOOK
|>
next message
endif

ifthen (m_id eq ID_00049 )
|< ID_00049
execute dbms "call GUIPROCF.DBA.ADD_DATE_RANGES"
|>
next message
endif

ifthen (m_id eq DCC_VARS_LABEL )
|< DCC_VARS_LABEL
execute dbms "call GUIPROCF.DBA.ADD_DCC_VARS"
|>
next message
endif

ifthen (m_id eq CASE_MOVER )
|< CASE_MOVER
execute dbms "call SYSPROC.PROCEDURES.{[DBA] Case Mover}"
|>
next message
endif

ifthen (m_id eq USE_GUI_RC )
|< USE_GUI_RC
. uncheck item USE_GUI_PG
. DUMMY = globals('GUI_PROCF_RC','1')
. display infobox 'You must exit the GUI and come back in' + CHAR(13) +CHAR(13) + 'If either is already set as default procfile, it trumps this setting' + CHAR(13) + CHAR(13) + 'CALL GUI_MAIN.START'
. EXIT MESSAGE
|>
next message
endif

ifthen (m_id eq USE_GUI_PG )
|< USE_GUI_PG
. DUMMY = globals('GUI_PROCF_RC','0')
. uncheck item USE_GUI_RC
. display infobox 'You must exit the GUI and come back in' + CHAR(13) +CHAR(13) + 'If either is already set as default procfile, it trumps this setting' + CHAR(13) + CHAR(13) + 'CALL GUI_MAIN.START'
. EXIT MESSAGE
|>
next message
endif

ifthen (m_id eq DB_LOCKER )
|< DB_LOCKER
execute dbms 'call GUIPROCF.DBA.LOCK_DB'
DB_LOCK_STATUS = 1
SHOW ITEM LOCK_STATUS_LABEL
uncheck item DB_UNLOCKER
|>
next message
endif

ifthen (m_id eq DB_UNLOCKER )
|< DB_UNLOCKER
execute dbms 'call GUIPROCF.DBA.UNLOCK_DB'
DB_LOCK_STATUS = 0
HIDE ITEM LOCK_STATUS_LABEL
uncheck item DB_LOCKER
|>
next message
endif

ifthen (m_id eq COMMENT_SHOW )
|< COMMENT_SHOW
. ifthen (getichk(COMMENT_SHOW) EQ 1)
.   DUMMY = globals('COMMENT','.')
. ELSE
.   DUMMY = globals('COMMENT','|')
. endif
. display infobox 'You must exit the GUI and come back in' + CHAR(13) +CHAR(13) + ' to see all comments'
|>
next message
endif

ifthen (m_id eq CHANGE_USER_APPLY )
|< CHANGE_USER_APPLY
display infobox "This GUI will close, start it again and you will be the user"
DUMMY = GLOBALS('USERA',UPPER(TRIM(GETTXT(CHANGE_USER))))
DUMMY = GLOBALN('GSECLEV',FST(NUMBR(TRIM(GETTXT(CHANGE_USER_SECLEV))),5))
EXIT MESSAGE
|>
next message
endif

ifthen (m_id eq TURN_DEBBUGER_ON )
|< TURN_DEBBUGER_ON
. ifthen (getichk(TURN_DEBBUGER_ON) EQ 1)
.   DUMMY = globals('DEBUG_MODE','1')
. ELSE
.   DUMMY = globals('DEBUG_MODE','0')
. endif
. display infobox 'You must exit the GUI and come back in' + CHAR(13) +CHAR(13) + ' to see all comments'
|>
next message
endif

ifthen (m_id eq POP_UP_DEBUG_INFO )
|< POP_UP_DEBUG_INFO
. ifthen (getichk(POP_UP_DEBUG_INFO) EQ 1)
.   DUMMY = globals('SHOW_DEBUG_INFO','1')
. ELSE
.   DUMMY = globals('SHOW_DEBUG_INFO','0')
. endif
. display infobox 'You must exit the GUI and come back in' + CHAR(13) +CHAR(13) + ' to see all comments'
|>
next message
endif

ifthen (m_id eq REC_FORM_SELECTED )
|< REC_FORM_SELECTED
. select item FORM_LIST, GETPOS(REC_FORM_SELECTED)
. select item REC_TYPE_SELECTED, GETPOS(REC_FORM_SELECTED)
. execute subprocedure FORM_LIST_LIBRARY
|>
next message
endif

ifthen (m_id eq CASE_DELETE_REFRESH )
|< CASE_DELETE_REFRESH
execute subprocedure CASE_ALL_DATA_DISPLAY
|>
next message
endif

ifthen (m_id eq PAGE_BULK_RECORD )
|< PAGE_BULK_RECORD
. m_page = VIEW_BULK_RECORD_DELETE
. execute subprocedure PAGE
. execute subprocedure ITEM_VISIBLE
. execute subprocedure CASE_ALL_DATA_DISPLAY
|>
next message
endif

ifthen (m_id eq MAKE_SCREENS )
|< MAKE_SCREENS
EXECUTE DBMS "CALL GUIPROCF.SCREENS.MAKE_ALL_SCREENS"  | make sure it is compiled

if(0 eq len(DB_PROC_FILE) or exists(DB_PROC_FILE) ) display infobox 'No DB_PROC_FILE defined'; next message
execute dbms 'set procfile ' + DB_PROC_FILE
ifthen ( EXISTS(meminfo(DB_PROC_FILE + ".SCREENS.ALLCALL", 1) ) = 0)
. execute dbms 'call GUIPROCF.SCREENS.MAKE_SCREENS_ALLCALL'
endif

execute dbms 'set procfile GUIPROCF'

|>
next message
endif

ifthen (m_id eq ID_00057 )
|< ID_00057
EXECUTE subroutine GUIPROCF.SCREENS.MAKE_ONE_SCREEN ( RECNUM ( GETTXT( MAKE_SCREEN_LIST ) ) )
|>
next message
endif

ifthen (m_id eq MAKE_CODEBOOK )
|< MAKE_CODEBOOK
execute dbms "call GUIPROCF.REPORTS.CODEBOOK_HTML"
|>
next message
endif

ifthen (m_id eq ID_00059 )
|< ID_00059
execute dbms "CALL GUIPROCF.BASE.MSTCLEAR"
|>
next message
endif

ifthen (m_id eq ID_00060 )
|< ID_00060
execute dbms "CALL GUIPROCF.BASE.MSTSET"
|>
next message
endif

ifthen (m_id eq MAKE_CUSTOM_REC_LIST )
|< MAKE_CUSTOM_REC_LIST
EXECUTE DBMS "CALL GUIPROCF.GUI_CUSTOM.MAKE_REC_LIST_LOAD"
|>
next message
endif

if (m_id eq 0) exit message

end message

message RMOUSE m_id, m_arg1, m_arg2
|{ RMouse

ifthen (m_id eq FORM_LIST )
|< FORM_LIST
. GEN_STR1 = ''
. if ( exists(recnum(gettxt(REC_TYPE_SELECTED))) eq 1 ) GEN_STR1 = format(recnum(gettxt(REC_TYPE_SELECTED)))
. GEN_STR1 = 'Selected: ' + gettxt(FORM_LIST) + '  (Table: ' + gettxt(REC_TYPE_SELECTED) +', #' + GEN_STR1 +')'
             + ' To screen: ' + gettxt(REC_FORM_SELECTED)
. display infobox GEN_STR1
|>
next message
endif


|}
end message
message TIMER
|{ Timer
. execute subprocedure TIME_CHECK
C  CHECK FOR USER MESSAGE NEEDS TO BE ADDED HERE.
. execute subprocedure SYSTEM_ERR_CHECK
|}
end message

end dialog
|{ Exit
<comment> write 'before exit'
. ifthen (sglobal('SHOW_DEBUG_INFO') EQ '1')
.   for EACH_BUFFER = 1, SYSTEM(56)  | check to see if debug_info buffer exists before trying to open it.
.     ifthen ( trim(bufname(EACH_BUFFER)) eq 'DEBUG_INFO' )
.       EDIT BUFFER 'DEBUG_INFO'
.       exit for
.     endif
.   end for
. endif
. ifNOT (nglobal('GSECLEV') = 1) EXECUTE DBMS 'CALL DCCPROCF.EXIT.MAIN'
<comment> write 'after exit'
|}
subprocedure page
|{ Pages
.  hide item I_AGREE
.  hide item I_DISAGREE
.  hide item DB_TITLE
.  hide item DB_FOOTER
.  hide item CASE_SEARCH
.  hide item CASE_LIST
.  hide item CASE_NEW
.  hide item CASE_INFO
.  hide item CASE_SEARCHLABEL
.  hide item CASE_LISTLABEL
.  hide item CASE_NEWLABEL
.  hide item CASE_SEARCHBOX
.  hide item CASE_NEWBOX
.  hide item CASE_LISTBOX
.  hide item CASE_BREAD_CRUMB
.  hide item TIME_LABEL
.  hide item GUI_VERSION
.  hide item DBA_PAGE
.  hide item CASE_NEWB
.  hide item FORM_LIST
.  hide item FORM_INFO
.  hide item REC_BREAD_CRUMB
.  hide item OPTIONS
.  hide item PAGE_TABLE
.  hide item PAGE_CASEIDS
.  hide item PAGE_OLD_KEYS
.  hide item PAGE_NEW_KEYS
.  hide item PAGE_DBA
.  hide item LOG_OUT
.  hide item OLD_KEY_LABEL_1
.  hide item OLD_KEY_LIST_1
.  hide item OLD_KEY_LABEL_2
.  hide item OLD_KEY_LIST_2
.  hide item OLD_KEY_LABEL_3
.  hide item OLD_KEY_LIST_3
.  hide item OLD_KEY_LABEL_4
.  hide item OLD_KEY_LIST_4
.  hide item NEW_KEY_LABEL_1
.  hide item NEW_KEY_CHOICE_1
.  hide item NEW_KEY_LABEL_2
.  hide item NEW_KEY_CHOICE_2
.  hide item NEW_KEY_LABEL_3
.  hide item NEW_KEY_CHOICE_3
.  hide item NEW_KEY_LABEL_4
.  hide item NEW_KEY_CHOICE_4
.  hide item NEW_KEY_VAR_MAP_1
.  hide item NEW_KEY_VAR_MAP_2
.  hide item NEW_KEY_VAR_MAP_3
.  hide item NEW_KEY_VAR_MAP_4
.  hide item NEW_KEY_VALUE_1
.  hide item NEW_KEY_VALUE_2
.  hide item NEW_KEY_VALUE_3
.  hide item NEW_KEY_VALUE_4
.  hide item USER_NAME
.  hide item DBA_NAME
.  hide item REC_SELECT_LABEL
.  hide item DEFAULT_BUTTON
.  hide item REC_TYPE_SELECTED
.  hide item CASE_BREAD_CRUMBOX
.  hide item CASE_SEARCHB
.  hide item NEW_REC_HELP
.  hide item ID_00009
.  hide item NEW_REC_BUTTON
.  hide item NEW_REC_CANCEL
.  hide item PAGE_CASE_DELETE
.  hide item DEBUG_CODE
.  hide item SPLASH_TEXT
.  hide item ID_00011
.  hide item ID_00013
.  hide item REC_BREAD_CRUMB_BOX
.  hide item REC_TABLE_DATA
.  hide item TABLE_KEY_LABEL_1
.  hide item TABLE_KEY_LABEL_2
.  hide item TABLE_KEY_LABEL_3
.  hide item TABLE_KEY_LABEL_4
.  hide item DELETE_CASE_LABEL
.  hide item CASE_DELETE_INFO
.  hide item CASE_DELETE_REASON
.  hide item CASE_DELETE_BUTTON
.  hide item ID_00017
.  hide item CASE_DELETE_WARNING
.  hide item CASE_REC_WARNING
.  hide item OLD_REC_COUNTER_LABEL
.  hide item OLD_REC_COUNTER
.  hide item TABLE_VIEW_SPREADSHEET
.  hide item ID_00019
.  hide item DELETE_CASE_BACK
.  hide item TABLE_VIEW_HELP
.  hide item LOCK_STATUS_LABEL
.  hide item VIEW_FORM
.  hide item GUI_PAGE
.  hide item PAGE_HIDDEN
.  hide item BACK_TO_ADMIN
.  hide item DEBUG_LABEL
.  hide item DEBUG_ON_OFF
.  hide item ID_00029
.  hide item ID_00030
.  hide item ID_00032
.  hide item MEGA_CASE_LABEL
.  hide item ID_00033
.  hide item CU_IMGAGE
.  hide item ID_00037
.  hide item SCREEN_COMPILE
.  hide item MASTER_DISPLAY
.  hide item GET_MASTER_INFO
.  hide item GUI_OPTION
.  hide item ID_00043
.  hide item ID_00044
.  hide item ID_00045
.  hide item YELLOW_BOX
.  hide item COMPILE_LABEL
.  hide item ALLCALL_SYS
.  hide item DB_INFO_LABEL
.  hide item ID_00047
.  hide item VIEW_CODEBOOK_LABEL
.  hide item SCHEMA_LABEL
.  hide item ID_00049
.  hide item DCC_VARS_LABEL
.  hide item ID_00050
.  hide item CASE_MOVER
.  hide item CASE_MOVER_LABEL
.  hide item USE_GUI_RC
.  hide item USE_GUI_PG
.  hide item DB_LOCKER
.  hide item DB_UNLOCKER
.  hide item DB_LOCK_LABEL
.  hide item COMMENT_SHOW
.  hide item CHANGE_USER_LABEL
.  hide item CHANGE_USER
.  hide item CHANGE_USER_APPLY
.  hide item CHANGE_USER_SECLEV
.  hide item ID_00051
.  hide item USER_NAME_EVERY_PAGE
.  hide item TURN_DEBBUGER_ON
.  hide item POP_UP_DEBUG_INFO
.  hide item ID_00052
.  hide item REC_FORM_SELECTED
.  hide item REC_DELETE_SELECTION_LABEL
.  hide item REC_SELECTION_CRITERIA
.  hide item CASE_DELETE_REFRESH
.  hide item PAGE_BULK_RECORD
.  hide item ID_00053
.  hide item TABEL_LABEL
.  hide item SCREEN_LABEL
.  hide item ID_00054
.  hide item SPLASH_HEADER
.  hide item MAKE_SCREENS
.  hide item ID_00055
.  hide item MAKE_SCREEN_LIST
.  hide item ID_00057
.  hide item ID_00058
.  hide item MAKE_CODEBOOK
.  hide item ID_00059
.  hide item ID_00060
.  hide item ID_00061
.  hide item MAKE_CUSTOM_REC_LIST
.  hide item ID_00062
.  ifthen (m_page EQ 1  )
.    show item I_AGREE
.    show item I_DISAGREE
.    show item USER_NAME
.    show item DBA_NAME
.    show item SPLASH_TEXT
.    show item ID_00011
.    show item ID_00033
.    show item CU_IMGAGE
.    show item ID_00054
.    show item SPLASH_HEADER
.  endif
.  ifthen (m_page EQ 2  )
.    show item DB_TITLE
.    show item DB_FOOTER
.    show item CASE_SEARCH
.    show item CASE_LIST
.    show item CASE_NEW
.    show item CASE_SEARCHLABEL
.    show item CASE_LISTLABEL
.    show item CASE_NEWLABEL
.    show item CASE_SEARCHBOX
.    show item CASE_NEWBOX
.    show item CASE_LISTBOX
.    show item TIME_LABEL
.    show item GUI_VERSION
.    show item CASE_NEWB
.    show item OPTIONS
.    show item PAGE_CASEIDS
.    show item PAGE_OLD_KEYS
.    show item PAGE_DBA
.    show item LOG_OUT
.    show item CASE_SEARCHB
.    show item LOCK_STATUS_LABEL
.    show item MEGA_CASE_LABEL
.    show item USER_NAME_EVERY_PAGE
.  endif
.  ifthen (m_page EQ 3  )
.    show item CASE_INFO
.    show item CASE_BREAD_CRUMB
.    show item FORM_LIST
.    show item FORM_INFO
.    show item REC_BREAD_CRUMB
.    show item PAGE_TABLE
.    show item PAGE_NEW_KEYS
.    show item OLD_KEY_LABEL_1
.    show item OLD_KEY_LIST_1
.    show item OLD_KEY_LABEL_2
.    show item OLD_KEY_LIST_2
.    show item OLD_KEY_LABEL_3
.    show item OLD_KEY_LIST_3
.    show item OLD_KEY_LABEL_4
.    show item OLD_KEY_LIST_4
.    show item REC_TYPE_SELECTED
.    show item CASE_BREAD_CRUMBOX
.    show item PAGE_CASE_DELETE
.    show item ID_00013
.    show item REC_BREAD_CRUMB_BOX
.    show item VIEW_FORM
.    show item YELLOW_BOX
.    show item REC_FORM_SELECTED
.    show item TABEL_LABEL
.    show item SCREEN_LABEL
.  endif
.  ifthen (m_page EQ 4  )
.    show item NEW_KEY_LABEL_1
.    show item NEW_KEY_CHOICE_1
.    show item NEW_KEY_LABEL_2
.    show item NEW_KEY_CHOICE_2
.    show item NEW_KEY_LABEL_3
.    show item NEW_KEY_CHOICE_3
.    show item NEW_KEY_LABEL_4
.    show item NEW_KEY_CHOICE_4
.    show item NEW_KEY_VAR_MAP_1
.    show item NEW_KEY_VAR_MAP_2
.    show item NEW_KEY_VAR_MAP_3
.    show item NEW_KEY_VAR_MAP_4
.    show item NEW_KEY_VALUE_1
.    show item NEW_KEY_VALUE_2
.    show item NEW_KEY_VALUE_3
.    show item NEW_KEY_VALUE_4
.    show item NEW_REC_HELP
.    show item ID_00009
.    show item NEW_REC_BUTTON
.    show item NEW_REC_CANCEL
.    show item ID_00051
.  endif
.  ifthen (m_page EQ 5  )
.    show item REC_TABLE_DATA
.    show item TABLE_KEY_LABEL_1
.    show item TABLE_KEY_LABEL_2
.    show item TABLE_KEY_LABEL_3
.    show item TABLE_KEY_LABEL_4
.    show item TABLE_VIEW_SPREADSHEET
.    show item ID_00019
.    show item TABLE_VIEW_HELP
.  endif
.  ifthen (m_page EQ 6  )
.    show item DELETE_CASE_LABEL
.    show item CASE_DELETE_INFO
.    show item CASE_DELETE_REASON
.    show item CASE_DELETE_BUTTON
.    show item ID_00017
.    show item CASE_DELETE_WARNING
.    show item CASE_REC_WARNING
.    show item DELETE_CASE_BACK
.  endif
.  ifthen (m_page EQ 7  )
.    show item DBA_PAGE
.    show item DEBUG_CODE
.    show item PAGE_HIDDEN
.    show item DEBUG_LABEL
.    show item DEBUG_ON_OFF
.    show item ID_00037
.    show item SCREEN_COMPILE
.    show item MASTER_DISPLAY
.    show item GET_MASTER_INFO
.    show item GUI_OPTION
.    show item ID_00043
.    show item ID_00044
.    show item ID_00045
.    show item COMPILE_LABEL
.    show item ALLCALL_SYS
.    show item DB_INFO_LABEL
.    show item ID_00047
.    show item VIEW_CODEBOOK_LABEL
.    show item SCHEMA_LABEL
.    show item ID_00049
.    show item DCC_VARS_LABEL
.    show item ID_00050
.    show item CASE_MOVER
.    show item CASE_MOVER_LABEL
.    show item USE_GUI_RC
.    show item USE_GUI_PG
.    show item DB_LOCKER
.    show item DB_UNLOCKER
.    show item DB_LOCK_LABEL
.    show item COMMENT_SHOW
.    show item CHANGE_USER_LABEL
.    show item CHANGE_USER
.    show item CHANGE_USER_APPLY
.    show item CHANGE_USER_SECLEV
.    show item TURN_DEBBUGER_ON
.    show item POP_UP_DEBUG_INFO
.    show item ID_00052
.    show item PAGE_BULK_RECORD
.    show item MAKE_SCREENS
.    show item ID_00055
.    show item MAKE_SCREEN_LIST
.    show item ID_00057
.    show item ID_00058
.    show item MAKE_CODEBOOK
.    show item ID_00059
.    show item ID_00060
.    show item ID_00061
.    show item MAKE_CUSTOM_REC_LIST
.  endif
.  ifthen (m_page EQ 8  )
.    show item BACK_TO_ADMIN
.    show item REC_DELETE_SELECTION_LABEL
.    show item REC_SELECTION_CRITERIA
.    show item CASE_DELETE_REFRESH
.    show item ID_00053
.    show item ID_00062
.  endif
.  ifthen (m_page EQ 9  )
.    show item REC_SELECT_LABEL
.    show item DEFAULT_BUTTON
.    show item OLD_REC_COUNTER_LABEL
.    show item OLD_REC_COUNTER
.    show item GUI_PAGE
.    show item ID_00029
.    show item ID_00030
.    show item ID_00032
.  endif
|}

end subprocedure
|{ Footer
CALL GUIPROCF.GUI_MAIN.ALL_SUBS_LIBRARY
|
|
|
|
END RETRIEVAL |program
|}
END PROCEDURE
