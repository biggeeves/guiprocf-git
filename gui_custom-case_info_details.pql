PROCEDURE      GUI_CUSTOM.CASE_INFO_DETAILS:T  (157693,33859)  |Last amended Jul 14, 2014,09:24:19
C LIST STATS FOR INDIVIDUAL CASE
c Must be sure that Case Type Global is set or it will not work.
C   TO INCLUDE THIS IN YOUR DATABASE
C   1) CREATE A MEMBER CALLED GUI_CUSTOME.CASE_INFO
C   2) ADD ONE LINE TO THE MEMBER: "CALL GUIPROCF.GUI_CUSTOM.CASE_INFO"

CALL GUIPROCF.GUI_CUSTOM.SET_LOCAL_CASE_TYPE

subroutine GUI_CUSTOM.CASE_INFO_DETAILS (THIS_CASEID GUI_ITEM_NUMBER) returning (PROCEED) replace

string  *  32   THIS_CASEID      | incoming case id value is always a string
string  *  32   LOCAL_CASE_ID$
integer *   4   LOCAL_CASE_ID#
integer *   2   GUI_ITEM_NUMBER
integer *   1   PROCEED
integer *   4   REC_TYPE_COUNT
string  * 300   GEN_STR1
INTEGER *   1   TEMP_VAR
STRING  *  72   STRING_VARGET
STRING  *  72   KEYVNAME__4

REC_TYPE_COUNT = 0

LOCAL_CASE_ID$ = THIS_CASEID
LOCAL_CASE_ID# = numbr(THIS_CASEID)

ifthen ( idstatus( GUI_ITEM_NUMBER ) eq 0 ) | GUI Item is not accessible
. PROCEED = 0
. write 'The GUI_ITEM_NUMBER' GUI_ITEM_NUMBER ' is not available.'  | Programmer feedback
. RETURN
endif


PROCEED = 1

if(exists (LOCAL_CASE_ID$) EQ 0 ) RETURN

if(sglobal('comment') eq '.')  write 'IN GUI_CUSTOM.CASE_INFO_DETAILS: ' LOCAL_CASE_ID$  | in the subroutine, the global comment might not be set during the backup routine and will throw an error if the line starts with <comment>

if(validate(0, VARNAMEC(0, 1), LOCAL_CASE_ID$) <> 0) DISPLAY INFOBOX 'NOT A VALID ID'; RETURN

PROCEED = 0

remove all GUI_ITEM_NUMBER
append line GUI_ITEM_NUMBER, '<body bgcolor="#FFFFFF" readonly="true">' html


CIF EQ 1, 0<LOCAL_CASE_TYPE>    | STRING.  TREAT EVERYTHING ELSE AS NUMERIC
. OLD CASE IS LOCAL_CASE_ID$
CIF FALSE
. OLD CASE IS LOCAL_CASE_ID#
CIF END
.   append line  GUI_ITEM_NUMBER, '<font size="+3"><B>' html
.   append line  GUI_ITEM_NUMBER, THIS_CASEID html
.   append line  GUI_ITEM_NUMBER, '</B>' HTML
.   append line  GUI_ITEM_NUMBER, ' Detailed Record Summary'

. DO REPEAT RECX = <GREC1>
                <GREC2>
                <GREC3>
                <GREC4>

.     GEN_STR1 = ''
.     ifthen(len(recdoc(RECX, 0)) gt 0)
.       GEN_STR1 = GEN_STR1 + trim(recdoc(RECX, 0))
.     elseif(len(recdoc(RECX ,1)) gt 0)
.       GEN_STR1 = GEN_STR1 + trim(recdoc(RECX, 1))
.     endif
.     GEN_STR1 = trimlr(replace(GEN_STR1, char(9), '', 5, 0, 0)) | remove tabs

.     GEN_STR1 = '(' + format(count(RECX)) + ') ' + GEN_STR1
.     append line  GUI_ITEM_NUMBER, '<BR>' + GEN_STR1 HTML

.     REC_TYPE_COUNT = sum(REC_TYPE_COUNT, count(RECX))

.     ifthen( count( RECX ) GT 0)
.       ifthen (nkeys(RECX) gt 0)
.         process rec RECX
.           GEN_STR1 = '      '  | give it some left padding
.           for EACH_KEY = 1 + dbtype(0), nkeys( RECX ) +  dbtype( 0 )
.             KEYVNAME__4 = pack( keyname( RECX, EACH_KEY ) )
.             STRING_VARGET = trimlr( varget( KEYVNAME__4 ) )
.             GEN_STR1 = GEN_STR1 + KEYVNAME__4 + '= ' + STRING_VARGET
.             if ( EACH_KEY lt nkeys( RECX ) +  dbtype( 0 ) ) GEN_STR1 = GEN_STR1 + ',  '
.           end for
.           append line  GUI_ITEM_NUMBER, '<br>' + GEN_STR1 HTML
.         end rec
.       endif
.     endif

end repeat


. END CASE IS
. append line  GUI_ITEM_NUMBER, '<br>--------------<br>' + format(REC_TYPE_COUNT) + ' TOTAL RECORDS IN THE DATABASE.' HTML
. TEMP_VAR = scrollto (GUI_ITEM_NUMBER,1)

end subroutine

CIF EQ 1,2   | THIS COULD BE ADDED BACK IN IF IT IS NOT TO MUCH INFO
.           GEN_STR1 = 'Created: '  | break is added to restore black small font
.           IF(EXISTS(DSTAMP) EQ 1)   GEN_STR1 = 'Created ' + DSTAMP
.           IF(EXISTS(DWHO) EQ 1)     GEN_STR1 = GEN_STR1 + ' by ' + DWHO
.           GEN_STR1 = GEN_STR1 + '<br>Last Edit: '
.           IF(EXISTS(DCCDATE) EQ 1)  GEN_STR1 = GEN_STR1 + ' on ' + DCCDATE
.           IF(EXISTS(DCCTIME) EQ 1)  GEN_STR1 = GEN_STR1 + ' at ' + DCCTIME
.           IF(EXISTS(DCCWHO) EQ 1)   GEN_STR1 = GEN_STR1 + ' by ' + DCCWHO
CIF END
END PROCEDURE
