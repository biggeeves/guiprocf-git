PROCEDURE      GUI_CUSTOM.MAKE_REC_LIST_LOAD:T  (158208,45044)  |Last amended Dec 11, 2015,12:30:44
C Create a complete list of screens.  Creates 1 screen per record type

PROGRAM crwarn
. call GUIPROCF.GUI_MAIN.DECLARE_VARIABLES
. execute subprocedure SET_PROCFILE_VARS

. FAMILY_NAME = 'GUI_CUSTOM'
. MEMBER_NAME = 'REC_LIST_LOAD'
. FULL_PATH_MEMBER = DB_PROC_FILE + '.' + FAMILY_NAME + '.' + MEMBER_NAME


. ifthen( 0 eq len( DB_PROC_FILE ) or exists( DB_PROC_FILE ) )
.   display infobox 'No DB_PROC_FILE defined.  EXITING.  CONTACT ADMIN.'
.   EXIT PROGRAM
. endif
. COMSTR = "set procfile " + DB_PROC_FILE
. execute dbms  COMSTR | gui_custom goes into database procfile file, not the guiprocf

. execute subprocedure MAKE_FAMILY

. ifthen ( meminfo (FULL_PATH_MEMBER + ':T', 1 )  > 0 ) | MEMBER ALREADY EXISTS
.    display YNBOX 'THIS  WILL  OVERWRITE   "' + FULL_PATH_MEMBER + '".' + CHAR(13) + 'OVER WRITE IT?' RESPONSE RESVAR
.    ifthen (RESVAR EQ 0 )
.      display infobox "CANCELED"
.      EXIT PROGRAM
.    endif
. endif

. open ( MEMBER_NAME ) dsnvar = FULL_PATH_MEMBER iostat = MY_IOSTAT  write lrecl=200 REPLACE member
. ifthen (MY_IOSTAT NE 0)
.   write 'unable to write to member: ' FULL_PATH_MEMBER ' .  exiting.  Them member was NOT made.  IOSTAT:' MY_IOSTAT
.   EXIT PROGRAM
. endif

. write( MEMBER_NAME ) "c Originally created by the GUIPROCF"
. write( MEMBER_NAME ) "c Template for creating your own custom record type list"
. write( MEMBER_NAME ) "c Three different lists must be appended to the GUI item using the exact same order"
. write( MEMBER_NAME ) "c 1) What the user sees  2) The member name   3) The record type name"
. write( MEMBER_NAME ) "c The code is prepopulated with all record type names in schema numeric order."
. write( MEMBER_NAME ) "c Customize as you see fit. Of course test it."
. write( MEMBER_NAME ) "c Returns pass or fail.  Pass, the list is loaded.  Fail the list is not loaded."
c
. write( MEMBER_NAME ) "subroutine GUI_CUSTOM.REC_LIST_LOAD (GUI_FORM_LABEL  GUI_FORM_NAME  GUI_FORM_REC_TYPE ) returning (PROCEED) replace"
. write( MEMBER_NAME ) "integer * 2 GUI_FORM_LABEL  GUI_FORM_NAME  GUI_FORM_REC_TYPE"
. write( MEMBER_NAME ) "integer * 1 PROCEED"
. write( MEMBER_NAME ) "PROCEED = 1"
. write( MEMBER_NAME ) "if(sglobal('comment') eq '.') write 'in SAMPLE.DBPROC.GUI_CUSTOM.REC_LIST_LOAD'"

. for EACH_RECORD_TYPE = 1, nrecs(0)
.   IF (nvarsc(EACH_RECORD_TYPE) EQ 0) NEXT FOR
.   MEMBER_LINE = ". append item GUI_FORM_LABEL, '"
.   ifthen( len( recdoc( EACH_RECORD_TYPE, 0 ) ) gt 0 )
.     MEMBER_LINE = MEMBER_LINE + trim(recdoc(EACH_RECORD_TYPE, 0 ) )
.   elseif( len( recdoc( EACH_RECORD_TYPE, 1 ) ) gt 0 )
.     MEMBER_LINE = MEMBER_LINE + trim(recdoc(EACH_RECORD_TYPE, 1 ) )
.   ELSE
.     MEMBER_LINE = MEMBER_LINE + recname(EACH_RECORD_TYPE)
.   endif
.   MEMBER_LINE = MEMBER_LINE + "'" ; execute subprocedure MEMBER_WRITE
.   MEMBER_LINE = ". append item GUI_FORM_NAME, '" + recname(EACH_RECORD_TYPE) + "'" ; execute subprocedure MEMBER_WRITE
.   MEMBER_LINE = ". append item GUI_FORM_REC_TYPE, '" + recname(EACH_RECORD_TYPE) + "'"; execute subprocedure MEMBER_WRITE
.   write ( MEMBER_NAME ) /
. end for
. write ( MEMBER_NAME ) "end subroutine"
. close MEMBER_NAME

C compile the new member
execute subprocedure COMPILE_MEMBER

C include the appropriate subprocedures
call GUIPROCF.GUI_MAIN.COMPILE_MEMBER
CALL GUIPROCF.GUI_MAIN.SET_PROCFILE_VARS
CALL GUIPROCF.GUI_MAIN.MAKE_FAMILY

subprocedure MEMBER_WRITE
. if (exists(MEMBER_LINE) EQ 0) MEMBER_LINE = '| WARNING SYSTEM MISSING MEMBERLINE!'
. write ( MEMBER_NAME )  MEMBER_LINE
end subprocedure

END PROGRAM


END PROCEDURE
