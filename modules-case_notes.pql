PROCEDURE      MODULES.CASE_NOTES:T  (157704,44871)  |Last amended Jul 25, 2014,12:27:51
C A NOTES SECTION FOR CASE IDS.
C FIRST IN GETS THE LOCK ON THE NOTE SECTION.
C LOCK IS RELEASED ON EXIT OR BY PUSH OF BUTTON.

CALL GUIPROCF.GUI_CUSTOM.SET_LOCAL_CASE_TYPE

SUBROUTINE SCREENS.CASE_MEMO ( CASE$ KEY$1 KEY$2 KEY$3 KEY$4 KEY$5 KEY$6 ) UPDATE REPLACE


integer*2 m_id, m_arg1, m_arg2


integer*1 IDSTATIC; preset IDSTATIC (-1)
integer*1 IDEXIT  ; preset IDEXIT   (0 )
integer*1 LINE_BOTTOM                              ; preset LINE_BOTTOM (1 )
integer*1 NOTES_AREA                               ; preset NOTES_AREA  (2 )
integer*1 SAVE_BUTTON                              ; preset SAVE_BUTTON (3 )
integer*1 EDIT_BUTTON                              ; preset EDIT_BUTTON      (5 )
integer*1 LOCK_STATUS                              ; preset LOCK_STATUS      (6 )

dialog "Case MEMO:"

line     LINE_BOTTOM                          ,   0, 24,   0, 491
button   SAVE_BUTTON                          , 22,      190,  70, 1, "Save"
button   EDIT_BUTTON                          , 22,      270,  70, 1, "Edit"
button   IDEXIT                               , 22,      350,  70, 0, "E&xit"
text     NOTES_AREA                           ,   2, 20,   9, 471, 0
LABEL    LOCK_STATUS                          ,   1, 5,   400, ''


INITIAL
STRING * 32 CASE$  KEY$1  KEY$2  KEY$3  KEY$4  KEY$5  KEY$6

LOCAL_CASE_ID$ = CASE$
LOCAL_CASE_ID# = numbr(CASE$)

CALL GUIPROCF.SCREENS.INC_VARS
RECNUMBER# = RECNUM("CASE_MEMO")
CALL GUIPROCF.SCREENS.INC_HEADER

. integer  *    4   MEMO_LINE_NUMBER
. integer  *    4   LOCKED_RECORD
. STRING   *   32   CASE_ID
. string   *  500   array MEMO$ (100)
. INTEGER  *    1   NO YES
. INTEGER  *    1   LINE_NUMBER
. INTEGER  *    2   MEMO_AREA_SIZE
. STRING   *  500   LINE_TEXT
. INTEGER  *    1   MODIFIED_NOTE
. integer  *    1   I_HAVE_RECORD
. integer  *    1   RES_VAR
. string   *    1   T
. set MEMO_AREA_SIZE MEMO_LINE_NUMBER (0)
. SET NO (0) YES (1)
. SET MODIFIED_NOTE (0)
. CASE_ID = '2'
. I_HAVE_RECORD = NO | ASSUME NO WRITE
. DO REPEAT IDTEXT = SAVE_BUTTON EDIT_BUTTON IDEXIT
.   SET ITEM FONT IDTEXT, 1, 0, 0, 0, "#FF0000/#FFFFFF"
. END REPEAT
. execute subprocedure MEMO_LOAD
end initial

message ALL m_id, m_arg1, m_arg2

. ifthen (m_id eq NOTES_AREA )
.   MODIFIED_NOTE = YES
. endif

. ifthen (m_id eq IDEXIT )
.   EXECUTE SUBPROCEDURE CHECK_MODS
.   EXECUTE SUBPROCEDURE REMOVE_LOCK  | REMOVE ANY LOCK UPON EXIT
.   EXIT MESSAGE
. endif

. ifthen (m_id eq SAVE_BUTTON )
.   EXECUTE SUBPROCEDURE MEMO_SAVE
. endif

. ifthen (m_id eq EDIT_BUTTON )
.   EXECUTE SUBPROCEDURE ADD_EDIT_LOCK
. endif

. ifthen (m_id eq 0)
.   EXECUTE SUBPROCEDURE CHECK_MODS
.   EXECUTE SUBPROCEDURE REMOVE_LOCK  | REMOVE ANY LOCK UPON EXIT
.   exit message
. endif
end message

end dialog

| CODE THAT RUNS AT EXIT
| AND SUBPROCEDURE

. subprocedure MEMO_LOAD
.   I_HAVE_RECORD = YES | ASSUME I HAVE THE RECORD EVEN IF WE DON'T GET INTO THE RECORD (IE NEW RECORDS DON'T EXISTS YET)
.   REMOVE ALL NOTES_AREA
.   focus item NOTES_AREA
CIF EQ 1, 0<LOCAL_CASE_TYPE>    | STRING.  TREAT EVERYTHING ELSE AS NUMERIC
. OLD CASE IS LOCAL_CASE_ID$
CIF FALSE
. OLD CASE IS LOCAL_CASE_ID#
CIF END
.     process rec CASE_MEMO WITH (1)  | ONLY THE FIRST LINE IS USED AS THE SWITCH
.       IFTHEN ( MEMO_LOCKED EQ YES)
.         I_HAVE_RECORD = NO
.         SET ITEM LOCK_STATUS '!!! READ ONLY  !!!'
.         disable item SAVE_BUTTON
.       ELSE
.         MEMO_LOCKED = YES
.         I_HAVE_RECORD = YES
.         SET ITEM LOCK_STATUS 'Read and write.'
.         disable item EDIT_BUTTON
.       ENDIF
.     END REC
|     2ND TIME THROUGH GETS THE INFO AND DISPLAYS IT.
.     process rec CASE_MEMO
C .       MEMO_LINE_NUMBER = MEMO_LINE_NUMBER + 1
C .       MEMO$(MEMO_LINE_NUMBER) = MEMO_LINE
.       append line NOTES_AREA, MEMO_LINE
.     end rec
.   end case
write [GETNLINES(NOTES_AREA)]
.   ifthen ( GETNLINES(NOTES_AREA) gt 1 )
.     t = setpos( NOTES_AREA, GETNLINES(NOTES_AREA) + 1)
.   else
.     t = setpos( NOTES_AREA, 0 )
.   elseif
. end subprocedure

. SUBPROCEDURE MEMO_SAVE
.   IFTHEN ( I_HAVE_RECORD EQ NO )
.     DISPLAY INFOBOX "Someone else is writing to this note. Saving is not allowed at this time"
.     exit SUBPROCEDURE
.   ENDIF
.   if ( MODIFIED_NOTE = NO) EXIT SUBPROCEDURE | IT WAS NOT MODIFIED DONT WASTE ENERGY SAVING.
.   MEMO_AREA_SIZE = getnline(NOTES_AREA)
CIF EQ 1, 0<LOCAL_CASE_TYPE>    | STRING.  TREAT EVERYTHING ELSE AS NUMERIC
. OLD CASE IS LOCAL_CASE_ID$
CIF FALSE
. OLD CASE IS LOCAL_CASE_ID#
CIF END
.     process rec CASE_MEMO LOCK=6
.       delete rec
.     end rec
.     for MEMO_LINE_NUMBER = 1, MEMO_AREA_SIZE
.       LINE_TEXT = getltxt( NOTES_AREA, MEMO_LINE_NUMBER )
.       rec is CASE_MEMO with ( MEMO_LINE_NUMBER ) LOCK=6
.         MODIFIED_NOTE = NO  | ATLEAST ONE LINE MUST BE SAVED TO TOGGLE THIS VALUE
.         MEMO_LINE = LINE_TEXT
.       end rec
.     end for
.   end case
. END SUBPROCEDURE

SUBPROCEDURE CHECK_MODS
. ifthen ( MODIFIED_NOTE = YES)
.   IFTHEN ( I_HAVE_RECORD EQ YES )
.     display yesnobox  "Save changes first?" response res_var
.     if (res_var eq 1) execute SUBPROCEDURE MEMO_SAVE
.   ELSE
.     DISPLAY INFOBOX "You did not have save access to the form.  Changes were not saved"
.   ENDIF
. endif
END SUBPROCEDURE

SUBPROCEDURE REMOVE_LOCK
CIF EQ 1, 0<LOCAL_CASE_TYPE>    | STRING.  TREAT EVERYTHING ELSE AS NUMERIC
. OLD CASE IS LOCAL_CASE_ID$
CIF FALSE
. OLD CASE IS LOCAL_CASE_ID#
CIF END
.   process rec CASE_MEMO WITH (1)
.     MEMO_LOCKED = NO
.     I_HAVE_RECORD = NO
.     set item LOCK_STATUS, ' READ ONLY'
.   end rec
. end case
END SUBPROCEDURE

SUBPROCEDURE ADD_EDIT_LOCK  | I WANT TO EDIT THE NOTE!
. IFTHEN ( I_HAVE_RECORD = NO )
.   DISPLAY YESNOBOX "If someone else is editing this, their changes or your changes may be lost.  Continue?"  response RES_VAR
.   IF (RES_VAR EQ 0) EXIT SUBPROCEDURE
. ENDIF
. I_HAVE_RECORD = YES
. enable item SAVE_BUTTON
. disable item EDIT_BUTTON
. set item LOCK_STATUS, 'Editable'
CIF EQ 1, 0<LOCAL_CASE_TYPE>    | STRING.  TREAT EVERYTHING ELSE AS NUMERIC
. OLD CASE IS LOCAL_CASE_ID$
CIF FALSE
. OLD CASE IS LOCAL_CASE_ID#
CIF END
.   process rec CASE_MEMO WITH (1) LOCK=6
.     MEMO_LOCKED = YES
.   end rec
. end case
END SUBPROCEDURE

end SUBROUTINE
END PROCEDURE
