|| Generated by DP - don't edit anything outside |{...|}

|{ Header
| File name: ADDON.INSTANT_CHAT
| Creator:   Greg Neils
| Created:   04/12/2012
| Pops up a messaage to a specific user or all users.  Called by timer in Navigate2.main (which looks for a file named for user or "ALLUSERS".
| May be called by other things as well as this is generic.  Closes by timer after 1 minute.
subroutine MODULES.INSTANT_CHAT (SEND_USER FROM_USER) REPLACE NODATABASE
|}

integer*2 m_id, m_arg1, m_arg2

integer*1 IDSTATIC; preset IDSTATIC (-1)
integer*1 IDCLOSE ; preset IDCLOSE  ( 0)
integer*1 CLOSE_CHAT                       ; preset CLOSE_CHAT                        (1 )
integer*1 CHATBOX                         ; preset CHATBOX                          (2 )
integer*1 CHAT_TEXT                        ; preset CHAT_TEXT                         (3 )
integer*1 CHAT_REPLY                       ; preset CHAT_REPLY                        (4 )
integer*1 CHAT_SEND                        ; preset CHAT_SEND                         (5 )
integer*1 CHATLABEL                        ; preset CHATLABEL                         (6 )
integer*1 REPLYLABEL                       ; preset REPLYLABEL                        (7 )

|{ Prologue
|}

dialog "DCC Chat Window"

|{ Controls
postype 1
button   CLOSE_CHAT                       ,   4,      329,  97, 0, "Close"
line     CHATBOX                         ,   0, 188,   7, 436
text     CHAT_TEXT                        ,  28, 104,  22, 404, 1
edit     CHAT_REPLY                       , 148,       22, 404, 0, 0
button   CHAT_SEND                        , 164,      329,  97, 1, "Reply"
label    CHATLABEL                        ,  19,       15, 124, "Current Conversation"
label    REPLYLABEL                       , 138,       15, 124, "Reply to "
|}

initial
|{ Attribs
|< CHATLABEL
. SET ITEM FONT CHATLABEL,1,0,0, 1,""
|>
|< REPLYLABEL
. SET ITEM FONT REPLYLABEL,1,0,0, 1,""
|>

|}
|{ Init
| Declare variables
| Case
. string  *  300   MESSTXT2$         | message to user
. string  *   32   SEND_USER          | to user. look for updates
. string  *   32   FROM_USER          | from user.  ie. reply to addres
. integer *    1   LOG_OUT_MINUTE      | Minutes until Time Out
. string  *  600   STR$1             | message back
. string  *  300   PATH_TO$
. string  *  300   PATH_FROM$
. string  *  300   FILE_ARCHIVE
. integer *    2   RC RC2
. integer *    1   T
. disable timer
. enable timer 60 | every minute do the timer thing.
. PATH_FROM$ = "<GDATA4>messages\" + FROM_USER + ".txt"
. PATH_TO$ = "<GDATA4>messages\" + SEND_USER + ".txt"
. FILE_ARCHIVE  = "<GDATA4>messages\sent\" + FROM_USER + ".txt"
. set LOG_OUT_MINUTE (1)
. ifthen (0 eq exists(FROM_USER) or len(FROM_USER))
.   FROM_USER = 'DBA'
.   hide item CHAT_REPLY
.   hide item CHAT_SEND
. endif
. set dialog title "Chat between: " + SEND_USER + " and " + FROM_USER
. set item REPLYLABEL, "Reply to " + FROM_USER
. execute subprocedure READMESSAGES
|}
end initial

message ALL m_id, m_arg1, m_arg2

|{ Message
LOG_OUT_MINUTE = 600
|}

ifthen (m_id eq CLOSE_CHAT )
|< CLOSE_CHAT
. exit message
|>
next message
endif

ifthen (m_id eq CHAT_SEND )
|< CHAT_SEND
. execute subprocedure SEND_REPLY
. set item CHAT_REPLY, ''
. LOG_OUT_MINUTE = 0
|>
next message
endif

if (m_id eq 0) exit message

end message

message TIMER
|{ Timer
. LOG_OUT_MINUTE = LOG_OUT_MINUTE - 1
. if (LOG_OUT_MINUTE LE 0) EXIT MESSAGE
. execute subprocedure READMESSAGES
|}
end message

end dialog
|{ Exit
. execute subprocedure RESET_TIMER
|}
|{ Footer
|
subprocedure SEND_REPLY
. STR$1 = SEND_USER + ' at ' +timec(now(0),'HH:MM pp')
. append line CHAT_TEXT, STR$1
. append line CHAT_TEXT, '  ' + gettxt(CHAT_REPLY)
. STR$1 = STR$1 + char(13) + gettxt(CHAT_REPLY)
. ifthen (fileis(PATH_FROM$) <> 1)
.   open (FILE_FROM) dsnvar=PATH_FROM$ write lrecl=300 iostat = RC
. else
.   open (FILE_FROM) dsnvar=PATH_FROM$ append lrecl=300 iostat = RC
. endif
. STR$1 = gettxt(CHAT_REPLY)
. write (FILE_FROM) STR$1
. close (FILE_FROM)
end subprocedure
|
subprocedure READMESSAGES
. ifthen (fileis(PATH_TO$) eq 1)
.   STR$1 = FROM_USER + ' at ' +timec(now(0),'HH:MM pp')
.   append line CHAT_TEXT, STR$1
.   open (FILE_ARCHIVE) dsnvar=FILE_ARCHIVE append lrecl=300 iostat = RC2
.   open (FILE_TO) dsnvar=PATH_TO$ read lrecl=300 iostat = RC
.     loop
.       read (FILE_TO,end=DONE1) FILE_LINE$ (A300)
.       append line  CHAT_TEXT, '  ' + FILE_LINE$
.       write (FILE_ARCHIVE) FILE_LINE$
.     end loop
.     DONE1:
.   close (FILE_TO)
.   close (FILE_ARCHIVE)
.   LOG_OUT_MINUTE = LOG_OUT_MINUTE - 2
.   ifthen (0 eq RC and RC2)
.     t = delfile(dsn('FILE_TO'))
.   ELSE
.     WRITE 'FAILURE TO MOVE FILE CONTENTS'
.   endif
. endif
end subprocedure
|
subprocedure RESET_TIMER
. disable timer
. enable timer 600 |set the timer back to every minute, MUST DO THIS BECAUSE TIMER IS GLOBAL
end subprocedure
end subroutine
|}

